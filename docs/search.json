[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hematology Disease Analysis",
    "section": "",
    "text": "Explore the raw data with metadata, extract the information of interest and convert to Summarized Experiment object\n\nDiann and Spectronaut\n\n\n\n\nCompare Diann and Spectronaut quality.\n\nComparison of DiannandSpectronaut\n\n\n\n\nValues: apply filtering, variance stabilizing normalization, imputation, dimension reduction, batch removal and visualization.\n\nDiann\nSpectronaut\n\n\n\n\n\nDiann\nSpectronaut"
  },
  {
    "objectID": "index.html#preparatory-data-analysis",
    "href": "index.html#preparatory-data-analysis",
    "title": "Hematology Disease Analysis",
    "section": "",
    "text": "Explore the raw data with metadata, extract the information of interest and convert to Summarized Experiment object\n\nDiann and Spectronaut\n\n\n\n\nCompare Diann and Spectronaut quality.\n\nComparison of DiannandSpectronaut\n\n\n\n\nValues: apply filtering, variance stabilizing normalization, imputation, dimension reduction, batch removal and visualization.\n\nDiann\nSpectronaut\n\n\n\n\n\nDiann\nSpectronaut"
  },
  {
    "objectID": "Diann_QC.html",
    "href": "Diann_QC.html",
    "title": "Diann_QC",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\ndiagOrd &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% \n  arrange(desc(n)) %&gt;%\n  pull(diag)\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag, levels = diagOrd))\nsmpAnno &lt;- smpAnno[order(match(smpAnno$diag, diagOrd)), ]\nsmpAnno$ID &lt;- factor(smpAnno$ID, levels = smpAnno$ID)\n\npreData &lt;- assays(seDiann)$log2 %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\ncusCols &lt;- c(\"#15A371\", \"green\", \"#A8F0BA\", \"blue\", \"#5083D1\", \"#8ECCF5\", \"cyan\", \n             \"#ED1379\", \"maroon1\", \"purple\", \"#AD9490\", \"brown\", \"red\", \"yellow\", \n             \"#E8CF15\", \"#F2D39B\", \"lightsalmon1\", \"antiquewhite\", \"black\", \"darkorange\")\nggplot(preData, aes(x = ID, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_blank(), legend.position = \"bottom\", legend.text = element_text(size = 7)) +\n  guides(fill = guide_legend(nrow = 7, byrow = TRUE)) + scale_fill_manual(values = cusCols)\n\n\n\n\n\npatTab &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n# diagSimple vs pelletSize\nggplot(patTab, aes(x = diagSimple, y = pelletSize, fill = diagSimple)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() + theme_bw()\n\n\n\n#  diagSimple vs sampleTpe\ntable(patTab[, c(\"diagSimple\", \"sampleType\")])  %&gt;% as.data.frame() %&gt;%\n  ggpubr::ggballoonplot(fill = \"value\", size.range = c(0, 15)) +\n  scale_fill_viridis_c(option = \"C\")\n\n\n\n# pelletSize vs sampleTpe\nggplot(patTab, aes(x = sampleType, y = pelletSize, fill = sampleType)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() +\n  theme_bw()\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped."
  },
  {
    "objectID": "Diann_QC.html#sample-plot",
    "href": "Diann_QC.html#sample-plot",
    "title": "Diann_QC",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\ndiagOrd &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% \n  arrange(desc(n)) %&gt;%\n  pull(diag)\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag, levels = diagOrd))\nsmpAnno &lt;- smpAnno[order(match(smpAnno$diag, diagOrd)), ]\nsmpAnno$ID &lt;- factor(smpAnno$ID, levels = smpAnno$ID)\n\npreData &lt;- assays(seDiann)$log2 %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\ncusCols &lt;- c(\"#15A371\", \"green\", \"#A8F0BA\", \"blue\", \"#5083D1\", \"#8ECCF5\", \"cyan\", \n             \"#ED1379\", \"maroon1\", \"purple\", \"#AD9490\", \"brown\", \"red\", \"yellow\", \n             \"#E8CF15\", \"#F2D39B\", \"lightsalmon1\", \"antiquewhite\", \"black\")\nggplot(preData, aes(x = ID, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_blank(), legend.position = \"bottom\", legend.text = element_text(size = 7)) +\n  guides(fill = guide_legend(nrow = 7, byrow = TRUE)) + scale_fill_manual(values = cusCols)"
  },
  {
    "objectID": "Diann_QC.html#comparison-before-and-after-normalisation",
    "href": "Diann_QC.html#comparison-before-and-after-normalisation",
    "title": "Diann_QC",
    "section": "comparison before and after normalisation",
    "text": "comparison before and after normalisation\n\nDEP::meanSdPlot(seDiann)\n\n\n\nDEP::meanSdPlot(seSub)\n\n\n\n\n\n# log2 plot\npreData %&gt;%\n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (log2 transformation without normalisation)\")\n\n\n\n# Plot after filtering and vsn\npostData &lt;- assay(seSub) %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\npostData %&gt;% \n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (vsn)\")"
  },
  {
    "objectID": "Diann_QC.html#missing-rate",
    "href": "Diann_QC.html#missing-rate",
    "title": "Diann_QC",
    "section": "missing rate",
    "text": "missing rate\n\nmissTab &lt;- assay(seDiann) %&gt;% as.data.frame() %&gt;%\n  mutate(sampleNr = rowSums(!is.na(.)), \n         missRate = rowSums(is.na(.))/ncol(.))\n\nmissPropTab &lt;- missTab  %&gt;%\n  group_by(missRate, sampleNr) %&gt;%\n  summarise(protNr = length(missRate), \n            proportion = protNr/nrow(.)) %&gt;% ungroup()\n\nplot_frequency(seDiann) + \n  theme(axis.text.x = element_text(angle = 45, size = 7)) + \n  scale_x_discrete(breaks = seq(-0, 399, 10))\n\n\n\n  # + expand_limits(x = c(-2, ncol(wideData) + 2), y = 0)\n\nmissPropTab %&gt;% ggplot(aes(x = missRate, y = proportion)) + geom_line(linewidth = 0.7, color = \"green\") +\n  theme(axis.title.y.right = element_text(color = \"green\"))+ \n  labs(x = \"Missing rate (%)\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(title = \"Protein missing rate\")"
  },
  {
    "objectID": "Diann_QC.html#upset-plot",
    "href": "Diann_QC.html#upset-plot",
    "title": "Diann_QC",
    "section": "upset plot",
    "text": "upset plot\n\npresTab &lt;- assay(seDiann) %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  left_join(patTab, by = c(\"smpID\" = \"smpID\")) %&gt;%\n  group_by(diagSimple, protID) %&gt;%\n  summarise(presence = ifelse(sum(is.na(count)) == 0 , 1, 0)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = diagSimple, values_from = presence) %&gt;%\n  column_to_rownames(\"protID\")\n\n`summarise()` has grouped output by 'diagSimple'. You can override using the\n`.groups` argument.\n\nsetVars &lt;- c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\", \"other\")\nupset(presTab,\n      sets = setVars,\n      order.by = \"freq\",\n        main.bar.color = \"violetred4\",\n        sets.bar.color = \"turquoise4\",\n        matrix.color = \"slateblue4\",\n        shade.color = \"wheat4\")"
  },
  {
    "objectID": "Diann_QC.html#mean-vs-missing",
    "href": "Diann_QC.html#mean-vs-missing",
    "title": "Diann_QC",
    "section": "mean vs missing",
    "text": "mean vs missing\n\nplot_detect(seSub)"
  },
  {
    "objectID": "Diann_QC.html#imputation",
    "href": "Diann_QC.html#imputation",
    "title": "Diann_QC",
    "section": "imputation",
    "text": "imputation\n\nassayNames(seSub) &lt;- \"vsn\"\nassays(seSub)$qrilc &lt;- DEP::impute(seSub, \"QRILC\") %&gt;% assay()\nassays(seSub)$minProb &lt;- DEP::impute(seSub, \"MinProb\", q = 0.07) %&gt;% assay()\n\n[1] 0.441956\n\nassays(seSub)$knn &lt;- DEP::impute(seSub, \"knn\", rowmax = max(rowSums(is.na(assay(seSub))))) %&gt;% assay()\n\nCluster size 6938 broken into 4551 2387 \nCluster size 4551 broken into 2888 1663 \nCluster size 2888 broken into 1 2887 \nDone cluster 1 \nCluster size 2887 broken into 1699 1188 \nCluster size 1699 broken into 1129 570 \nDone cluster 1129 \nDone cluster 570 \nDone cluster 1699 \nDone cluster 1188 \nDone cluster 2887 \nDone cluster 2888 \nCluster size 1663 broken into 501 1162 \nDone cluster 501 \nDone cluster 1162 \nDone cluster 1663 \nDone cluster 4551 \nCluster size 2387 broken into 1462 925 \nDone cluster 1462 \nDone cluster 925 \nDone cluster 2387 \n\n# save(seSub, file = \"output/seDiann_sub.RData\")\n\nallImp &lt;- lapply(c(\"qrilc\", \"minProb\", \"knn\"), function(imp){\n  assays(seSub)[[imp]] %&gt;%\n    tibble(Mean = rowMeans(., ), \n           `Proportion of Missing` = rowSums(is.na(assay(seSub)))/ncol(.)) %&gt;%\n    mutate(Imputation = imp)\n}) %&gt;% do.call(rbind, .)\n\nplot1 &lt;- assays(seSub)$vsn %&gt;% t() %&gt;%\n  plot_meanMiss(bins = 100, color = \"cyan\") + scale_fill_viridis_c(option = \"C\")\n\nplot1 + geom_smooth(allImp, mapping = aes(y = `Proportion of Missing`, x = Mean, col = Imputation), \n                    method = 'loess', se = FALSE) + facet_wrap(~Imputation, ncol = 2) + theme_bw()"
  },
  {
    "objectID": "preprocessing.html",
    "href": "preprocessing.html",
    "title": "Preprocessing",
    "section": "",
    "text": "Metadata Investigation\n\n# sample annotation\nsmpDF &lt;- readxl::read_excel (\"data/Proteomics_o30666_samplePreparation_V3_SP.xlsx\") %&gt;%\n  mutate(smpID = paste0(\"S\", `Sample ID bfabric`),\n         patID = PatientID,\n         diag = Diagnosis,\n         set = Project,\n         pelletSize = `Pellet size \\r\\n[1E+06 cells]`,\n         sampleProcessGroup = `Group for sample processing and injections`,\n         BTKiTimePoint = `BTKi time point`,\n         sampleType = Stype,\n         processDate = `Processing date`,\n         sampleID = SampleID) %&gt;%\n  select(all_of(c(\"smpID\", \"sampleID\", \"patID\", \"diag\", \"set\", \"BTKiTimePoint\", \"sampleType\", \"processDate\", \"pelletSize\", \"sampleProcessGroup\")))\nknitr::kable(head(smpDF))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsmpID\nsampleID\npatID\ndiag\nset\nBTKiTimePoint\nsampleType\nprocessDate\npelletSize\nsampleProcessGroup\n\n\n\n\nS454476\n12PB0339\nP0453\nMZL\nLymphoma/HCL\nNA\nPB\n2022-02-15\n0.5\nNA\n\n\nS454477\nSID3079\nPID1418\nMCL\nLymphoma/HCL, BTKi\nalternative untreated\nPB\n2022-02-15\n0.5\nsame patient\n\n\nS454478\n15PB0310\nP1043\nMCL\nLymphoma/HCL\nNA\nPB\n2022-02-15\n0.5\nNA\n\n\nS454479\n16PB0006\nP1063\nMCL\nLymphoma/HCL\nNA\nPB\n2022-02-15\n0.5\nNA\n\n\nS454480\n14PB0373\nP0892\nMZL\nLymphoma/HCL\nNA\nPB\n2022-02-15\n0.5\nNA\n\n\nS454481\n13PB0574\nP0710\nMCL\nLymphoma/HCL, BTKi\nfirst, peak\nPB\n2022-02-15\n0.5\nNA\n\n\n\n\n# wrong annotation\nsmpDF[smpDF$sampleID == \"SID2287\", ]$diag &lt;- \"SMZL\" \nsmpDF[smpDF$sampleID == \"SID2503\", ]$diag &lt;- \"Unclear indolent B-cell lymphoma\"\n\n# change the names\nsmpDF$diag &lt;- stringi::stri_replace_all_regex(smpDF$diag, \n                       pattern = c(\" \\\\+ \", \", \", \" \\\\(\", \"\\\\) \", \"\\\\)\", \"\\\\?\", \"/\"),\n                       replacement = c(rep(\"_\", 3), rep(\"\", 3), \"_or_\"),\n                       vectorize = FALSE) %&gt;%\n  str_replace(\"\\\\+\", \"_\") %&gt;%\n  str_replace_all(\" \", \"_\")\nsmpDF[grep(\"healty\", smpDF$diag), ]$diag &lt;- \"healthy\"\n\n# make unique ID\nsmpDF &lt;- unite(smpDF, ID, c(diag, smpID), remove = FALSE) %&gt;% \n  make_unique(\"patID\", \"ID\") %&gt;%\n  column_to_rownames(\"smpID\")\n\n# investigate diagnosis and patients\ndiagTab &lt;- smpDF %&gt;% group_by(diag) %&gt;%\n  summarise(Count = length(diag)) %&gt;% arrange(desc(Count))\ndiagTab$condition &lt;- factor(diagTab$diag, levels = diagTab$diag)\nggplot(diagTab, aes(x = condition, y = Count, fill = condition)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = Count), position = position_dodge(width = 0.9), vjust = -0.25) +\n  theme_bw() +\n  theme(legend.position = \"bottom\", \n        axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 20),\n        axis.title.x = element_blank()) \n\n\n\nsetTab &lt;- smpDF %&gt;% group_by(set) %&gt;%\n  summarise(Count = length(set)) %&gt;% arrange(desc(Count))\nsetTab$Project &lt;- factor(setTab$set, levels = setTab$set)\nggplot(setTab, aes(x = Project, y = Count, fill = Project)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = Count), position = position_dodge(width = 0.9), vjust = -0.25) +\n  theme_bw() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 20)) \n\n\n\n# 2. protein annotation\ndiannData &lt;- read_tsv(\"data/DIANN_03052023/2286262/WU288349/out-2023-04-26/diann-output.pg_matrix.tsv\", show_col_types = FALSE)\ngeneDF &lt;- diannData %&gt;%\n  dplyr::rename(protID = Protein.Group, geneID = Genes) %&gt;%\n  select(protID, geneID)\n\n# filter control proteins\nprotAnno &lt;- geneDF %&gt;% filter(!str_detect(protID, \"Y-FGCZCont\"))\nctrlProts &lt;- setdiff(geneDF$protID, protAnno$protID)\n\n\n\nCount data investigation\n\ndiannL &lt;- diannData %&gt;% \n  select(Protein.Group, contains(\"scratch\")) %&gt;%\n  pivot_longer(-Protein.Group) %&gt;%\n  separate(name, letters[1:10], \"_\") %&gt;%\n  mutate(smpID = e) %&gt;%\n  dplyr::rename(protID = Protein.Group, count = value) %&gt;%\n  select(smpID, protID, count)\n\nWarning: Expected 10 pieces. Missing pieces filled with `NA` in 3765363 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\ntail(diannL) %&gt;% knitr::kable()\n\n\n\n\nsmpID\nprotID\ncount\n\n\n\n\nS454608\nY-FGCZCont00493\nNA\n\n\nS454778\nY-FGCZCont00493\nNA\n\n\nS454782\nY-FGCZCont00493\nNA\n\n\nS454792\nY-FGCZCont00493\nNA\n\n\nS454542\nY-FGCZCont00493\nNA\n\n\nS454868\nY-FGCZCont00493\n3458.21\n\n\n\n\nspecL &lt;- read_tsv(\"data/20230605_084251_20230223_p3254_o30666_hybridLibrary_merged/20230605_084359_ProteinQuant_AD (Normal).tsv\", show_col_types = FALSE) %&gt;%\n  separate(R.FileName, letters[1:10], \"_\") %&gt;%\n  mutate(smpID = d) %&gt;%\n  dplyr::rename(protID = PG.ProteinAccessions, count = PG.Quantity) %&gt;%\n  select(smpID, protID, count) %&gt;%\n  mutate(count = ifelse(is.nan(count), NA, count))\n\nWarning: Expected 10 pieces. Missing pieces filled with `NA` in 2439726 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\ntail(specL) %&gt;% knitr::kable()\n\n\n\n\nsmpID\nprotID\ncount\n\n\n\n\nS454542\nY-FGCZCont00456\n23.11214\n\n\nS454542\nY-FGCZCont00459;Y-FGCZCont00463\nNA\n\n\nS454542\nY-FGCZCont00464\n192.07571\n\n\nS454542\nY-FGCZCont00474\n162.67084\n\n\nS454542\nY-FGCZCont00477\n103.24450\n\n\nS454542\nY-FGCZCont00493\n351.87003\n\n\n\n\n\n\n\nOutlier detection\n\n# sample outliers\nprotTabAll &lt;- bind_rows(diannL %&gt;% mutate(software = \"diann\"), specL %&gt;% mutate(software = \"spectronaut\"))\nsmpIden &lt;- protTabAll %&gt;% \n  group_by(software, smpID) %&gt;%\n  summarise(\"Protein count\" = sum(!is.na(count))) %&gt;%\n  arrange(`Protein count`) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'software'. You can override using the\n`.groups` argument.\n\nsmpOut &lt;- protTabAll %&gt;% \n  group_by(software) %&gt;% \n  summarise(\"total proteins\" = length(unique(protID))) %&gt;%\n  left_join(smpIden, by = c(\"software\" = \"software\")) %&gt;%\n  ungroup()\n\nrbind(smpOut[smpOut$software == \"diann\", ][1:5, ], smpOut[smpOut$software == \"spectronaut\", ][1:5, ]) %&gt;% knitr::kable(caption = \"Protein count per sample (top5 samples per software)\")\n\n\nProtein count per sample (top5 samples per software)\n\n\nsoftware\ntotal proteins\nsmpID\nProtein count\n\n\n\n\ndiann\n9437\nS454851\n2438\n\n\ndiann\n9437\nS454783\n3078\n\n\ndiann\n9437\nS454863\n3447\n\n\ndiann\n9437\nS454850\n3514\n\n\ndiann\n9437\nS454841\n3914\n\n\nspectronaut\n8085\nS454710\n12\n\n\nspectronaut\n8085\nS454872\n2258\n\n\nspectronaut\n8085\nS454851\n2552\n\n\nspectronaut\n8085\nS454783\n2868\n\n\nspectronaut\n8085\nS454863\n3322\n\n\n\n\n# protein outliers\nprotOut &lt;- protTabAll %&gt;% \n  group_by(software, protID) %&gt;% \n  summarise(\"Sample count\" = sum(!is.na(count))) %&gt;%\n  arrange(`Sample count`) %&gt;%\n  ungroup(protID)\n\n`summarise()` has grouped output by 'software'. You can override using the\n`.groups` argument.\n\nrbind(protOut[protOut$software == \"diann\", ][1:5, ], protOut[protOut$software == \"spectronaut\", ][1:5, ]) %&gt;% knitr::kable(caption = \"Sample count per protein (top5 proteins per software)\")\n\n\nSample count per protein (top5 proteins per software)\n\n\nsoftware\nprotID\nSample count\n\n\n\n\ndiann\nA0A0C4DH26\n1\n\n\ndiann\nA0A0C4DH33\n1\n\n\ndiann\nO00204\n1\n\n\ndiann\nO14798\n1\n\n\ndiann\nO94911\n1\n\n\nspectronaut\nA0A075B6P5;P01615\n0\n\n\nspectronaut\nA0A075B6S2;A2NJV5\n0\n\n\nspectronaut\nA0A0A0MT36\n0\n\n\nspectronaut\nA0A0B4J2D5;P0DPI2\n0\n\n\nspectronaut\nA0A0B4J2D9;P0DP09\n0\n\n\n\n\nsummarise(protOut, \"Complete missing proteins\" = sum(`Sample count` == 0)) %&gt;% knitr::kable()\n\n\n\n\nsoftware\nComplete missing proteins\n\n\n\n\ndiann\n0\n\n\nspectronaut\n164\n\n\n\n\n\n\n\nDIANN SE\n\nassay.diann &lt;- pivot_wider(diannL, names_from = smpID, values_from = count) %&gt;%\n  filter(!(protID %in% ctrlProts | str_detect(protID, \"Y-FGCZCont\"))) %&gt;% \n  arrange(protID) %&gt;%\n  column_to_rownames(\"protID\") %&gt;% \n  select(rownames(smpDF)) %&gt;%\n  as.matrix()\nprotAnno.diann &lt;- left_join(as_tibble(assay.diann, rownames = \"protID\"), protAnno) %&gt;% \n  select(colnames(protAnno)) %&gt;%\n  make_unique(\"geneID\", \"protID\", delim = \";\")\n\nJoining with `by = join_by(protID)`\n\nrownames(assay.diann) &lt;- protAnno.diann$name\nrownames(protAnno.diann) &lt;- protAnno.diann$name\nseDiann &lt;- SummarizedExperiment(assays = assay.diann, \n                                colData = smpDF, \n                                rowData = protAnno.diann)\nassayNames(seDiann) &lt;- \"count\"\nassays(seDiann)$log2 &lt;- log2(assay.diann)\nsave(seDiann, file = \"output/seDiann.RData\")\n\n\n\nSpectronaut SE after filtering\n\nrmProts.spec &lt;- union(ctrlProts, \n                      protOut[protOut$`Sample count` == 0 & protOut$software == \"spectronaut\", ]$protID)\nassay.spec &lt;- pivot_wider(specL, names_from = smpID, values_from = count) %&gt;%\n  filter(!(protID %in% rmProts.spec | str_detect(protID, \"Y-FGCZCont\"))) %&gt;% \n  arrange(protID) %&gt;%\n  column_to_rownames(\"protID\") %&gt;% \n  select(rownames(smpDF)) %&gt;%\n  as.matrix()\nprotAnno.spec &lt;- left_join(as_tibble(assay.spec, rownames = \"protID\"), protAnno) %&gt;% \n  select(colnames(protAnno)) %&gt;%\n  make_unique(\"geneID\", \"protID\", delim = \";\")\n\nJoining with `by = join_by(protID)`\n\nrownames(assay.spec) &lt;- protAnno.spec$name\nrownames(protAnno.spec) &lt;- protAnno.spec$name\nseSpec &lt;- SummarizedExperiment(assays = assay.spec, \n                               colData = smpDF, \n                               rowData = protAnno.spec)\nassayNames(seSpec) &lt;- \"count\"\nassays(seSpec)$log2 &lt;- log2(assay.spec)\nsave(seSpec, file = \"output/seSpec.RData\")"
  },
  {
    "objectID": "Spec_QC.html",
    "href": "Spec_QC.html",
    "title": "Spectronaut Quality Control",
    "section": "",
    "text": "load(\"output/seSpec.RData\")\ndiagOrd &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% \n  arrange(desc(n)) %&gt;%\n  pull(diag)\nsmpAnno &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag, levels = diagOrd))\nsmpAnno &lt;- smpAnno[order(match(smpAnno$diag, diagOrd)), ]\nsmpAnno$ID &lt;- factor(smpAnno$ID, levels = smpAnno$ID)\n\npreData &lt;- assays(seSpec)$log2 %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\ncusCols &lt;- c(\"#15A371\", \"green\", \"#A8F0BA\", \"blue\", \"#5083D1\", \"#8ECCF5\", \"cyan\", \n             \"#ED1379\", \"maroon1\", \"purple\", \"#AD9490\", \"brown\", \"red\", \"yellow\", \n             \"#E8CF15\", \"#F2D39B\", \"lightsalmon1\", \"antiquewhite\", \"black\", \"darkorange\")\nggplot(preData, aes(x = ID, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_blank(), legend.position = \"bottom\", legend.text = element_text(size = 7)) +\n  guides(fill = guide_legend(nrow = 7, byrow = TRUE)) + scale_fill_manual(values = cusCols)\n\n\n\n\n\npatTab &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n# diagSimple vs pelletSize\nggplot(patTab, aes(x = diagSimple, y = pelletSize, fill = diagSimple)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() + theme_bw() +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\n\n\n#  diagSimple vs sampleTpe\ntable(patTab[, c(\"diagSimple\", \"sampleType\")])  %&gt;% as.data.frame() %&gt;%\n  ggpubr::ggballoonplot(fill = \"value\", size.range = c(0, 15)) +\n  scale_fill_viridis_c(option = \"C\") +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\n\n\n# pelletSize vs sampleTpe\nggplot(patTab, aes(x = sampleType, y = pelletSize, fill = sampleType)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() +\n  theme_bw() +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped."
  },
  {
    "objectID": "Spec_QC.html#sample-plot",
    "href": "Spec_QC.html#sample-plot",
    "title": "Spectronaut Quality Control",
    "section": "",
    "text": "load(\"output/seSpec.RData\")\ndiagOrd &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% \n  arrange(desc(n)) %&gt;%\n  pull(diag)\nsmpAnno &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag, levels = diagOrd))\nsmpAnno &lt;- smpAnno[order(match(smpAnno$diag, diagOrd)), ]\nsmpAnno$ID &lt;- factor(smpAnno$ID, levels = smpAnno$ID)\n\npreData &lt;- assays(seSpec)$log2 %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\ncusCols &lt;- c(\"#15A371\", \"green\", \"#A8F0BA\", \"blue\", \"#5083D1\", \"#8ECCF5\", \"cyan\", \n             \"#ED1379\", \"maroon1\", \"purple\", \"#AD9490\", \"brown\", \"red\", \"yellow\", \n             \"#E8CF15\", \"#F2D39B\", \"lightsalmon1\", \"antiquewhite\", \"black\", \"darkorange\")\nggplot(preData, aes(x = ID, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_blank(), legend.position = \"bottom\", legend.text = element_text(size = 7)) +\n  guides(fill = guide_legend(nrow = 7, byrow = TRUE)) + scale_fill_manual(values = cusCols)\n\n\n\n\n\npatTab &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n# diagSimple vs pelletSize\nggplot(patTab, aes(x = diagSimple, y = pelletSize, fill = diagSimple)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() + theme_bw() +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\n\n\n#  diagSimple vs sampleTpe\ntable(patTab[, c(\"diagSimple\", \"sampleType\")])  %&gt;% as.data.frame() %&gt;%\n  ggpubr::ggballoonplot(fill = \"value\", size.range = c(0, 15)) +\n  scale_fill_viridis_c(option = \"C\") +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\n\n\n# pelletSize vs sampleTpe\nggplot(patTab, aes(x = sampleType, y = pelletSize, fill = sampleType)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() +\n  theme_bw() +\n  ggrepel::geom_text_repel(\n    data = patTab[patTab$smpID == \"S454710\", ],\n    aes(label = smpID), \n    box.padding = 2, \n    size = 3.5)\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped."
  },
  {
    "objectID": "Spec_QC.html#comparison-before-and-after-normalization",
    "href": "Spec_QC.html#comparison-before-and-after-normalization",
    "title": "Spectronaut Quality Control",
    "section": "comparison before and after normalization",
    "text": "comparison before and after normalization\n\nDEP::meanSdPlot(seSpec)\n\n\n\nDEP::meanSdPlot(seSub)\n\n\n\n\n\n# log2 plot\npreData %&gt;%\n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (log2 transformation without normalisation)\")\n\n\n\n# Plot after filtering and vsn\npostData &lt;- assay(seSub) %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\npostData %&gt;% \n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (vsn)\")"
  },
  {
    "objectID": "Spec_QC.html#missing-rate",
    "href": "Spec_QC.html#missing-rate",
    "title": "Spectronaut Quality Control",
    "section": "missing rate",
    "text": "missing rate\n\nmissTab &lt;- assay(seSpec) %&gt;% as.data.frame() %&gt;%\n  mutate(sampleNr = rowSums(!is.na(.)), \n         missRate = rowSums(is.na(.))/ncol(.))\n\nmissPropTab &lt;- missTab  %&gt;%\n  group_by(missRate, sampleNr) %&gt;%\n  summarise(protNr = length(missRate), \n            proportion = protNr/nrow(.)) %&gt;% ungroup()\n\nplot_frequency(seSpec) + \n  theme(axis.text.x = element_text(angle = 45, size = 7)) + \n  scale_x_discrete(breaks = seq(-0, 399, 10))\n\n\n\n  # + expand_limits(x = c(-2, ncol(wideData) + 2), y = 0)\n\nmissPropTab %&gt;% ggplot(aes(x = missRate, y = proportion)) + geom_line(linewidth = 0.7, color = \"green\") +\n  theme(axis.title.y.right = element_text(color = \"green\"))+ \n  labs(x = \"Missing rate (%)\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(title = \"Protein missing rate\")"
  },
  {
    "objectID": "Spec_QC.html#upset-plot",
    "href": "Spec_QC.html#upset-plot",
    "title": "Spectronaut Quality Control",
    "section": "upset plot",
    "text": "upset plot\n\npatTab &lt;- colData(seSpec) %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n    mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \npresTab &lt;- assay(seSpec) %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  left_join(patTab, by = c(\"smpID\" = \"smpID\")) %&gt;%\n  group_by(diagSimple, protID) %&gt;%\n  summarise(presence = ifelse(sum(is.na(count)) == 0 , 1, 0)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = diagSimple, values_from = presence) %&gt;%\n  column_to_rownames(\"protID\")\n\n`summarise()` has grouped output by 'diagSimple'. You can override using the\n`.groups` argument.\n\nsetVars &lt;- c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\", \"other\")\nupset(presTab,\n      sets = setVars,\n      order.by = \"freq\",\n        main.bar.color = \"violetred4\",\n        sets.bar.color = \"turquoise4\",\n        matrix.color = \"slateblue4\",\n        shade.color = \"wheat4\")"
  },
  {
    "objectID": "Spec_QC.html#mean-vs-missing",
    "href": "Spec_QC.html#mean-vs-missing",
    "title": "Spectronaut Quality Control",
    "section": "mean vs missing",
    "text": "mean vs missing\n\nplot_detect(seSub)"
  },
  {
    "objectID": "Spec_QC.html#imputation",
    "href": "Spec_QC.html#imputation",
    "title": "Spectronaut Quality Control",
    "section": "Imputation",
    "text": "Imputation\n\nassayNames(seSub) &lt;- \"vsn\"\nassays(seSub)$qrilc &lt;- DEP::impute(seSub, \"QRILC\") %&gt;% assay()\nassays(seSub)$minProb &lt;- DEP::impute(seSub, \"MinProb\", q = 0.07) %&gt;% assay()\n\n[1] 0.6433399\n\nassays(seSub)$knn &lt;- DEP::impute(seSub, \"knn\", rowmax = max(rowSums(is.na(assay(seSub))))) %&gt;% assay()\n\nCluster size 6107 broken into 2844 3263 \nCluster size 2844 broken into 832 2012 \nDone cluster 832 \nCluster size 2012 broken into 891 1121 \nDone cluster 891 \nDone cluster 1121 \nDone cluster 2012 \nDone cluster 2844 \nCluster size 3263 broken into 1295 1968 \nDone cluster 1295 \nCluster size 1968 broken into 226 1742 \nDone cluster 226 \nCluster size 1742 broken into 1632 110 \nCluster size 1632 broken into 1120 512 \nDone cluster 1120 \nDone cluster 512 \nDone cluster 1632 \nDone cluster 110 \nDone cluster 1742 \nDone cluster 1968 \nDone cluster 3263 \n\n# save(seSub, file = \"output/seSpec_sub.RData\")\n\nallImp &lt;- lapply(c(\"qrilc\", \"minProb\", \"knn\"), function(imp){\n  assays(seSub)[[imp]] %&gt;%\n    tibble(Mean = rowMeans(., ), \n           `Proportion of Missing` = rowSums(is.na(assay(seSub)))/ncol(.)) %&gt;%\n    mutate(Imputation = imp)\n}) %&gt;% do.call(rbind, .)\n\nplot1 &lt;- assays(seSub)$vsn %&gt;% t() %&gt;%\n  plot_meanMiss(bins = 100, color = \"cyan\") + scale_fill_viridis_c(option = \"C\")\nplot1 + geom_smooth(allImp, mapping = aes(y = `Proportion of Missing`, x = Mean, col = Imputation), method = 'loess', se = FALSE) + facet_wrap(~Imputation, ncol = 2) + theme_bw()"
  },
  {
    "objectID": "QA.html",
    "href": "QA.html",
    "title": "QA and Comparison",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\nsmpAnno &lt;- colData(seDiann) %&gt;% as_tibble(rownames = \"smpID\") \nnumDetect.diann &lt;- tibble(smpID = colnames(seDiann),\n                          DIANN = colSums(!is.na(assay(seDiann))))\n\ndiagOrd &lt;- colData(seDiann) %&gt;% as_tibble(rownames = \"smpID\") %&gt;% group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% arrange(desc(n)) %&gt;%\n  pull(diag)\n\nload(\"output/seSpec.RData\")\n\nnumDetect.spec &lt;- tibble(smpID = colnames(seSpec),\n                         Spectronaut = colSums(!is.na(assay(seSpec))))\n\nplotCom &lt;- left_join(numDetect.diann, numDetect.spec) %&gt;% left_join(smpAnno)  %&gt;%\n  mutate(condition = factor(diag, levels = diagOrd))\n\nJoining with `by = join_by(smpID)`\nJoining with `by = join_by(smpID)`\n\nggplot(plotCom, aes(x = Spectronaut, y = DIANN)) +\n  geom_point(aes(col = condition), size=5) +\n  theme_bw() +\n  xlab(\"Number of proteins by Spectronaut\") +\n  ylab(\"Number of proteins by DIANN\") +\n  geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  xlim(0, 8000) + ylim(0, 8000) +\n  theme(legend.position = \"bottom\",\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 20))\n\n\n\n# ggsave(\"protNumCompare.pdf\", height = 10, width = 9)\n\nggplot(plotCom, aes(x = Spectronaut, y = DIANN)) +\n  geom_point(aes(col = pelletSize), size=5) +\n  theme_bw() +\n  xlab(\"Number of proteins by Spectronaut\") +\n  ylab(\"Number of proteins by DIANN\") +\n  geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  xlim(0,8000) + ylim(0,8000) +\n  theme(legend.position = \"bottom\",\n        axis.text = element_text(size=18),\n        axis.title = element_text(size=20))\n\n\n\n# ggsave(\"protNumCompare_pellet.pdf\", height = 10, width = 9)"
  },
  {
    "objectID": "QA.html#before-normalization-already-log2-inside-se-object",
    "href": "QA.html#before-normalization-already-log2-inside-se-object",
    "title": "QA and Comparison",
    "section": "Before normalization, already log2 inside SE object",
    "text": "Before normalization, already log2 inside SE object\n\nmedTab.diann &lt;- tibble(smpID = colnames(seDiann),\n                       DIANN = colMedians(assays(seDiann)$log2, na.rm = TRUE))\n\nmedTab.spec &lt;- tibble(smpID = colnames(seSpec),\n                      Spectronaut = colMedians(assays(seSpec)$log2, na.rm = TRUE))\n\ncomTab &lt;- left_join(medTab.diann, medTab.spec) %&gt;% left_join(smpAnno) %&gt;% \n  pivot_longer(c(DIANN, Spectronaut), names_to = \"software\", values_to = \"medVal\") %&gt;%\n  mutate(condition = factor(diag, levels = diagOrd))\n\nJoining with `by = join_by(smpID)`\nJoining with `by = join_by(smpID)`\n\n\nPoint plot\n\nmedComTab &lt;- left_join(medTab.diann, medTab.spec) %&gt;% left_join(smpAnno) %&gt;%\n  mutate(condition = factor(diag, levels = diagOrd))\n\nJoining with `by = join_by(smpID)`\nJoining with `by = join_by(smpID)`\n\nggplot(medComTab, aes(x=Spectronaut,y = DIANN)) +\n  geom_point(aes(col = condition), size = 5)  +\n  theme_bw() +\n  xlab(\"Median expression by Spectronaut\") +\n  ylab(\"Median expression by DIANN\") +\n  #geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  #xlim(0,8000) + ylim(0,8000) +\n  theme(legend.position = \"bottom\",\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 20))\n\n\n\n# ggsave(\"medCompare.pdf\", height = 10, width = 9)\n\nggplot(medComTab, aes(x = Spectronaut, y = DIANN)) +\n  geom_point(aes(col = pelletSize), size = 5)  +\n  theme_bw() +\n  xlab(\"Median expression by Spectronaut\") +\n  ylab(\"Median expression by DIANN\") +\n  #geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  #xlim(0,8000) + ylim(0,8000) +\n  theme(legend.position = \"bottom\",\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 20))\n\n\n\n# ggsave(\"medCompare_pellet.pdf\", height = 10, width = 9)\n\nBoxplot\n\nggplot(comTab, aes(x = condition, y = medVal)) +\n  geom_boxplot(outlier.shape = NA) +\n  ggbeeswarm::geom_quasirandom(aes(col = condition)) +\n  facet_wrap(~software, ncol = 1, scale = \"free_y\") + \n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5)) +\n  labs(y = \"median expression\", title = \"Before normalization\")\n\n\n\n# ggsave(\"medVal_beforeVsn.pdf\", height = 5, width = 6)"
  },
  {
    "objectID": "QA.html#after-normalization",
    "href": "QA.html#after-normalization",
    "title": "QA and Comparison",
    "section": "After normalization",
    "text": "After normalization\n\ndiannMat &lt;- assays(seDiann)$count\ndiannMat &lt;- diannMat[rowSums(is.na(diannMat))/ncol(diannMat) &lt; 0.5, ]\ndim(diannMat)\n\n[1] 6938  399\n\ndiannMat.vst &lt;- justvsn(diannMat)\n\nspecMat &lt;- assays(seSpec)$count\nspecMat &lt;- specMat[rowSums(is.na(specMat))/ncol(specMat) &lt; 0.5, ]\ndim(specMat)\n\n[1] 6107  399\n\nspecMat.vst &lt;- justvsn(specMat)\n\nmedTab.diann &lt;- tibble(smpID = colnames(diannMat),\n                       DIANN = colMedians(diannMat.vst, na.rm=TRUE))\n\nmedTab.spec &lt;- tibble(smpID = colnames(specMat),\n                      Spectronaut = colMedians(specMat.vst, na.rm=TRUE))\n\ncomTab.vst &lt;- left_join(medTab.diann, medTab.spec) %&gt;% left_join(smpAnno) %&gt;% \n  pivot_longer(c(DIANN,Spectronaut), names_to = \"software\", values_to = \"medVal\") %&gt;%\n  mutate(condition = factor(diag, levels = diagOrd))\n\nJoining with `by = join_by(smpID)`\nJoining with `by = join_by(smpID)`\n\n\n\nggplot(comTab.vst, aes(x = condition, y = medVal)) +\n  geom_boxplot(outlier.shape = NA) +\n  ggbeeswarm::geom_quasirandom(aes(col= condition)) +\n  facet_wrap(~software, ncol = 1, scale = \"free_y\") + \n  theme_bw() +\n  labs(y = \"median expression\", title = \"After vsn\") + \n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5))\n\n\n\n# ggsave(\"medVal_afterVsn.pdf\", height = 5, width = 6)"
  },
  {
    "objectID": "QA.html#spectronaut",
    "href": "QA.html#spectronaut",
    "title": "QA and Comparison",
    "section": "Spectronaut",
    "text": "Spectronaut\nSpectronaut has a outlier that has only 12 proteins.\n\nspecMatMiss &lt;- apply(as.matrix(is.na(assay(seSpec[, -which(colnames(seSpec) %in% \"S454710\")]))), 2, as.numeric)\ncolAnno &lt;- smpAnno %&gt;% \n  mutate(diag = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) %&gt;%\n  select(smpID, diag, pelletSize) %&gt;%\n  column_to_rownames(\"smpID\") %&gt;%\n  as.data.frame()\n\npheatmap(specMatMiss, show_rownames = FALSE, show_colnames = FALSE, treeheight_row = 0, treeheight_col = 0,\n         annotation_col = colAnno)\n\n\n\nmissRateSpec &lt;- tibble(rate = rowSums(specMatMiss)/ncol(specMatMiss),\n                       software = \"spectronaut\")\n\n\nplot_detect(seSpec[ , -which(colnames(seSpec) %in% \"S454710\")])"
  },
  {
    "objectID": "QA.html#diann",
    "href": "QA.html#diann",
    "title": "QA and Comparison",
    "section": "DIANN",
    "text": "DIANN\n\ndiannMatMiss &lt;- apply(as.matrix(is.na(assay(seDiann))), 2, as.numeric)\npheatmap(diannMatMiss, show_rownames = FALSE, show_colnames = FALSE, treeheight_row = 0, treeheight_col = 0,\n         annotation_col = colAnno)\n\n\n\nmissRateDiann &lt;- tibble(rate = rowSums(diannMatMiss)/ncol(diannMatMiss),\n                       software = \"diann\")\n\n\nplot_detect(seDiann)"
  },
  {
    "objectID": "QA.html#compare-spectronaut-and-diann",
    "href": "QA.html#compare-spectronaut-and-diann",
    "title": "QA and Comparison",
    "section": "Compare Spectronaut and DIANN",
    "text": "Compare Spectronaut and DIANN\n\nmissRateCom &lt;- bind_rows(missRateSpec, missRateDiann)\nggplot(missRateCom, aes(x = rate, fill = software)) +\n  geom_density(position = \"identity\", alpha = 0.5) +\n  xlab(\"missing value rate\") +\n  theme_bw() +\n  theme(axis.text = element_text(size=15),\n        axis.title = element_text(size=15))\n\n\n\n\n\nmissCutDF &lt;- lapply(seq(0, 1, by = 0.1), function(cutoff){\n  data &lt;- missRateCom %&gt;%\n    mutate(id = paste0(\"id\", nrow(.))) %&gt;%\n    group_by(software) %&gt;%\n    summarise(`Cumulative proportion` = sum(rate &lt;= cutoff)/length(id)) %&gt;%\n    ungroup()\n  data$`missRate cutoff` &lt;- cutoff\n  data\n}) %&gt;% bind_rows()\nmissCutDF %&gt;% ggplot(aes(x = `missRate cutoff`, y = `Cumulative proportion`, col = software)) +\n  geom_line(size = 2) +\n  theme_bw() +\n  xlab(\"Allowed missing value rate\") +\n  ylab(\"Remaining proteins (%)\") +\n  theme(axis.text = element_text(size = 15),\n        axis.title = element_text(size = 15))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "QA.html#commonly-detected-proteins",
    "href": "QA.html#commonly-detected-proteins",
    "title": "QA and Comparison",
    "section": "Commonly detected proteins",
    "text": "Commonly detected proteins\n\nGene level\n\nggvenn::ggvenn(list(\"DIANN\" = unique(rowData(seDiann)$geneID), \n                    \"Spectronaut\" = unique(rowData(seSpec)$geneID))) +\n  ggtitle(\"Gene level\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 15))\n\n\n\n\nAt least 50% detection rate\n\nseDiann.sub &lt;- seDiann[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5,]\nseSpec.sub &lt;- seSpec[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5,]\n\n#at least\nggvenn::ggvenn(list(\"DIANN\" = unique(rowData(seDiann.sub)$geneID), \n                    \"Spectronaut\" = unique(rowData(seSpec.sub)$geneID))) +\n  ggtitle(\"After filter proteins of 50% missing rate\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 15))"
  },
  {
    "objectID": "QA.html#protein-level",
    "href": "QA.html#protein-level",
    "title": "QA and Comparison",
    "section": "protein level",
    "text": "protein level\n\nggvenn::ggvenn(list(\"DIANN\" = unique(rowData(seDiann)$protID), \n                    \"Spectronaut\" = unique(rowData(seSpec)$protID)))+\n  ggtitle(\"Protein level\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 15))\n\n\n\n\nAt least 50% detection rate\n\n#at least\nggvenn::ggvenn(list(\"DIANN\" = unique(rowData(seDiann.sub)$protID), \n                    \"Spectronaut\" = unique(rowData(seSpec.sub)$protID))) +\n  ggtitle(\"After filter proteins of 50% missing rate\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 15))"
  },
  {
    "objectID": "QA.html#expression-level",
    "href": "QA.html#expression-level",
    "title": "QA and Comparison",
    "section": "Expression level",
    "text": "Expression level\n\n#define detection group\nll &lt;- list(\"DIANN\" = unique(rowData(seDiann)$protID), \n           \"Spectronaut\" = unique(rowData(seSpec)$protID))\ndetGroup &lt;- list(onlyDiann = setdiff(ll$DIANN, ll$Spectronaut),\n                 onlySpec = setdiff(ll$Spectronaut, ll$DIANN),\n                 both = intersect(ll$DIANN, ll$Spectronaut))\n\nvstTab.spec &lt;- specMat.vst %&gt;% as_tibble(rownames = \"id\") %&gt;% pivot_longer(-id) %&gt;% mutate(software = \"Spectronaut\", protID = rowData(seSpec)[id,]$protID) \nvstTab.diann &lt;- diannMat.vst %&gt;% as_tibble(rownames = \"id\") %&gt;% pivot_longer(-id) %&gt;% mutate(software = \"DIANN\", protID = rowData(seDiann)[id,]$protID)\nvstTab &lt;- bind_rows(vstTab.spec, vstTab.diann) %&gt;%\n  pivot_wider(names_from = software, values_from = value)\n\n\nplotTab &lt;- mutate(vstTab, group = case_when(\n    protID %in% detGroup$onlySpec ~ \"only Spectronaut\",\n    protID %in% detGroup$onlyDiann ~ \"only DIANN\",\n    protID %in% detGroup$both ~ \"both\"\n  )) %&gt;%\n  pivot_longer(c(Spectronaut,DIANN), names_to = \"software\", values_to = \"value\")\n\nggplot(plotTab, aes(x = value, fill = group)) +\n  geom_density(position = \"identity\", alpha = 0.5) +\n  facet_wrap(~software) +\n  theme_bw() +\n  theme(axis.text = element_text(size = 15),\n        axis.title = element_text(size = 15))\n\nWarning: Removed 1399790 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\nmissRateTab &lt;- group_by(plotTab, group, protID, software) %&gt;%\n  summarise(missRate = sum(is.na(value))/length(name)) %&gt;%\n  filter(missRate &lt;1)\n\n`summarise()` has grouped output by 'group', 'protID'. You can override using\nthe `.groups` argument.\n\nggplot(missRateTab, aes(x=missRate, fill = group)) +\n  geom_density(position = \"identity\", alpha = 0.5) +\n  facet_wrap(~software) +\n  theme_bw() +\n  theme(axis.text = element_text(size = 15),\n        axis.title = element_text(size = 15))\n\n\n\n\n\nvarTab &lt;- group_by(plotTab, group, protID, software) %&gt;%\n  filter(!is.na(value)) %&gt;%\n  summarise(var = sd(value)/mean(value))\n\n`summarise()` has grouped output by 'group', 'protID'. You can override using\nthe `.groups` argument.\n\nggplot(varTab, aes(x = var, fill = group)) +\n  geom_density(position = \"identity\", alpha=0.5) +\n  facet_wrap(~software) +\n  theme_bw() +\n  theme(axis.text = element_text(size=15),\n        axis.title = element_text(size=15))"
  },
  {
    "objectID": "QA.html#reproducibility",
    "href": "QA.html#reproducibility",
    "title": "QA and Comparison",
    "section": "Reproducibility",
    "text": "Reproducibility\n\ncorResTab &lt;- filter(vstTab, !is.na(Spectronaut), !is.na(DIANN)) %&gt;%\n  select(-protID) %&gt;%\n  group_by(id) %&gt;% \n  nest() %&gt;%\n  mutate(m = map(data, ~cor(.$Spectronaut,.$DIANN))) %&gt;%\n  mutate(res = map(m, broom::tidy)) %&gt;%\n  unnest(res)\n\nggplot(corResTab, aes(x=x)) +\n  geom_histogram(fill = \"lightblue\", alpha = .5,col = \"blue\") +\n  geom_vline(xintercept = median(corResTab$x), color = \"red\") +\n  xlab(\"Pearson correlation coefficient\") +\n  theme_bw()+\n  theme(axis.text = element_text(size=15),\n        axis.title = element_text(size=15))"
  },
  {
    "objectID": "QA.html#within-healthy-donors",
    "href": "QA.html#within-healthy-donors",
    "title": "QA and Comparison",
    "section": "Within healthy donors",
    "text": "Within healthy donors\n\n#identify real replicates\npatTab &lt;- colData(seSpec) %&gt;% as_tibble(rownames = \"smpID\") \nhealthyTab &lt;- filter(patTab, diag == \"healthy\")\ntable(healthyTab$patID)\n\n\n  Donor 1205 Donor 171532 Donor 171590 Donor 171779 Donor 171944   Donor 2204 \n           4            2            4            4            3            3 \n  Donor 3206   Donor 3208   Donor 4208   Donor 9200   Donor 9209 \n           2            3            3            4            3 \n\n\nEvery healthy donors have replicates\n\nSpectronaut\nPCA\n\nseSub &lt;- seSpec[, healthyTab$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(healthyTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = patID)) +\n  geom_point(aes(size = pelletSize, shape = sampleType)) +\n  geom_line(linetype = \"dotted\") +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                     axis.title = element_text(size = 15))\n\n\n\n\nHeatmap\n\nplotMat &lt;- assay(seSub.imput)\ncolAnno &lt;- healthyTab %&gt;% select(smpID, patID, pelletSize, sampleID, sampleType) %&gt;%\n   column_to_rownames(\"smpID\")\npheatmap(plotMat, annotation_col = colAnno, show_rownames = FALSE, show_colnames = FALSE, \n         scale = \"row\", treeheight_row = 0)\n\n\n\n\n\n\nDIANN\nPCA\n\nseSub &lt;- seDiann[, healthyTab$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(healthyTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = patID)) +\n  geom_point(aes(size = pelletSize, shape = sampleType)) +\n  geom_line(linetype = \"dotted\") +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))\n\n\n\n\nHeatmap\n\nplotMat &lt;- assay(seSub.imput)\ncolAnno &lt;- healthyTab %&gt;% select(smpID, patID, pelletSize, sampleID, sampleType) %&gt;%\n   column_to_rownames(\"smpID\")\npheatmap(plotMat, annotation_col = colAnno, show_rownames = FALSE, show_colnames = FALSE, \n         scale = \"row\", treeheight_row = 0)"
  },
  {
    "objectID": "QA.html#within-cll-samples",
    "href": "QA.html#within-cll-samples",
    "title": "QA and Comparison",
    "section": "Within CLL samples",
    "text": "Within CLL samples\n\n#identify real replicates\ncllTab &lt;- filter(patTab, diag == \"CLL\", set ==\"CLL\")\npatNum &lt;- table(cllTab$patID)\n\nsort(patNum, decreasing = TRUE)\n\n\n PID279  PID301  PID883  PID907 PID1013 PID1015 PID1016 PID1022 PID1024 PID1035 \n      2       2       2       2       1       1       1       1       1       1 \nPID1036 PID1065 PID1068 PID1077 PID1086 PID1091 PID1095 PID1098 PID1102 PID1128 \n      1       1       1       1       1       1       1       1       1       1 \nPID1133 PID1165 PID1167 PID1171 PID1173 PID1176 PID1177 PID1179 PID1192 PID1199 \n      1       1       1       1       1       1       1       1       1       1 \n PID121 PID1210 PID1211 PID1222 PID1226 PID1228 PID1242 PID1247 PID1248 PID1260 \n      1       1       1       1       1       1       1       1       1       1 \nPID1276 PID1280 PID1285 PID1293 PID1301 PID1307 PID1318 PID1349 PID1382 PID1392 \n      1       1       1       1       1       1       1       1       1       1 \nPID1399 PID1437 PID1438 PID1439 PID1440 PID1454 PID1461 PID1462 PID1469 PID1489 \n      1       1       1       1       1       1       1       1       1       1 \nPID1494 PID1496 PID1511 PID1547 PID1565 PID1590 PID1591 PID1601 PID1602 PID1617 \n      1       1       1       1       1       1       1       1       1       1 \nPID1634 PID1637 PID1638 PID1644 PID1650 PID1673 PID1678 PID1705 PID1761 PID1791 \n      1       1       1       1       1       1       1       1       1       1 \nPID1876 PID1877 PID1976 PID1997 PID2031 PID2036 PID2060 PID2072 PID2089 PID2233 \n      1       1       1       1       1       1       1       1       1       1 \n PID229  PID239  PID263  PID305  PID512  PID518  PID528  PID674  PID675   PID74 \n      1       1       1       1       1       1       1       1       1       1 \n PID884  PID894  PID898  PID901  PID909  PID951  PID952  PID955  PID963  PID970 \n      1       1       1       1       1       1       1       1       1       1 \n\ncllTab &lt;- cllTab %&gt;% filter(patID %in% names(patNum[patNum &gt; 1]))\n\n\nSpectronaut\nPCA\n\nseSub &lt;- seSpec[, cllTab$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(cllTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = patID)) +\n  geom_point(aes(size = pelletSize, shape = sampleType)) +\n  geom_line(linetype = \"dotted\") +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))\n\n\n\n\nHeatmap\n\nplotMat &lt;- assay(seSub.imput)\ncolAnno &lt;- cllTab %&gt;% select(smpID, patID, pelletSize, sampleType) %&gt;%\n   column_to_rownames(\"smpID\")\npheatmap(plotMat, annotation_col = colAnno, show_rownames = FALSE, show_colnames = FALSE, \n         scale = \"row\", treeheight_row = 0)\n\n\n\n\n\n\nDIANN\nPCA\n\nseSub &lt;- seDiann[, cllTab$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(cllTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = patID)) +\n  geom_point(aes(size = pelletSize, shape = sampleType)) +\n  geom_line(linetype = \"dotted\") +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))\n\n\n\n\nHeatmap\n\nplotMat &lt;- assay(seSub.imput)\ncolAnno &lt;- cllTab %&gt;% select(smpID, patID, pelletSize, sampleType ) %&gt;%\n   column_to_rownames(\"smpID\")\npheatmap(plotMat, annotation_col = colAnno, show_rownames = FALSE, show_colnames = FALSE, \n         scale = \"row\", treeheight_row = 0)"
  },
  {
    "objectID": "QA.html#spectronaut-3",
    "href": "QA.html#spectronaut-3",
    "title": "QA and Comparison",
    "section": "Spectronaut",
    "text": "Spectronaut\nProcessing\n\nseSub &lt;- seSpec[, -which(colnames(seSpec) %in% \"S454710\")]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npatTab &lt;- colData(seSub) %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\"))\n\n\nPerform PCA\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))\n\n\n\nggplot(pcTab, aes(x = PC3, y = PC4, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))"
  },
  {
    "objectID": "QA.html#diann-3",
    "href": "QA.html#diann-3",
    "title": "QA and Comparison",
    "section": "DIANN",
    "text": "DIANN\nProcessing\n\nseSub &lt;- seDiann\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npatTab &lt;- colData(seSub) %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n\nPerform PCA\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                     axis.title = element_text(size = 15))\n\n\n\nggplot(pcTab, aes(x = PC3, y = PC4, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                     axis.title = element_text(size = 15))"
  },
  {
    "objectID": "QA.html#spectronaut-4",
    "href": "QA.html#spectronaut-4",
    "title": "QA and Comparison",
    "section": "Spectronaut",
    "text": "Spectronaut\nProcessing\n\nseSub &lt;- seSpec[, -which(colnames(seSpec) %in% \"S454710\")]\nseSub &lt;- seSub[, seSub$diag != \"healthy\" & seSub$pelletSize &gt; 0.2]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npatTab &lt;- colData(seSub) %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n\nPerform PCA\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n    theme_bw() + theme(axis.text = element_text(size=15),\n                     axis.title = element_text(size = 15))\n\n\n\nggplot(pcTab, aes(x = PC3, y = PC4, col = diagSimple, shape = sampleType)) +\n  geom_point(aes( size= pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                    axis.title = element_text(size = 15))"
  },
  {
    "objectID": "QA.html#diann-4",
    "href": "QA.html#diann-4",
    "title": "QA and Comparison",
    "section": "DIANN",
    "text": "DIANN\nProcessing\n\nseSub &lt;- seDiann[, seDiann$diag != \"healthy\" & seDiann$pelletSize &gt; 0.2]\nseSub &lt;- seSub[rowSums(is.na(assay(seSub)))/ncol(seSub) &lt; 0.5,]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nassay(seSub) &lt;- exprMat.vst\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\npatTab &lt;- colData(seSub) %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n\nPerform PCA\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\nJoining with `by = join_by(smpID)`\n\nggplot(pcTab, aes(x = PC1, y = PC2, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                     axis.title = element_text(size = 15))\n\n\n\nggplot(pcTab, aes(x = PC3, y = PC4, col = diagSimple, shape = sampleType)) +\n  geom_point(aes(size = pelletSize)) +\n  theme_bw() + theme(axis.text = element_text(size = 15),\n                     axis.title = element_text(size = 15))"
  },
  {
    "objectID": "Diann_QC.html#comparison-before-and-after-normalization",
    "href": "Diann_QC.html#comparison-before-and-after-normalization",
    "title": "Diann_QC",
    "section": "comparison before and after normalization",
    "text": "comparison before and after normalization\n\nDEP::meanSdPlot(seDiann)\n\n\n\nDEP::meanSdPlot(seSub)\n\n\n\n\n\n# log2 plot\npreData %&gt;%\n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (log2 transformation without normalisation)\")\n\n\n\n# Plot after filtering and vsn\npostData &lt;- assay(seSub) %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\npostData %&gt;% \n  ggplot(aes(x = ID, y = count, fill = diag)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(axis.text.y = element_blank(), legend.position = \"bottom\", plot.title = element_text(hjust = 0.5)) + \n  scale_fill_manual(values = cusCols) +\n  coord_flip() +\n  ggtitle(\"Distribuiton per sample (vsn)\")"
  },
  {
    "objectID": "Diann_QC.html#all-samples",
    "href": "Diann_QC.html#all-samples",
    "title": "Diann_QC",
    "section": "All samples",
    "text": "All samples\n\n# perform PCA\npcRes &lt;- prcomp(t(assays(seAll)$qrilc), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n356\n\n\nBM aspirate\n28\n\n\nSpleen\n13\n\n\nPleural effusion\n1\n\n\nSpleen biopsy\n1\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1712\nPID1564\nPID497\nPID935\nDonor 1205\nDonor 171590\nDonor 171779\nDonor 9200\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nDonor 171944\nDonor 2204\nDonor 3208\nDonor 4208\nDonor 9209\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1418\nPID1419\nPID1662\nPID1844\nPID2105\nDonor 171532\nDonor 3206\nP0641\nP0782\nP1151\nPID1014\nPID1027\nPID110\nPID1109\nPID1200\nPID1246\nPID1344\nPID1350\nPID1359\nPID1450\nPID1456\nPID1517\nPID1561\nPID1579\nPID1624\nPID1670\nPID1694\nPID1704\nPID1893\nPID1982\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID961\nP0034\nP0057\nP0350\nP0361\nP0435\nP0444\nP0453\nP0511\nP0520\nP0527\nP0534\nP0535\nP0573\nP0584\nP0599\nP0680\nP0682\nP0683\nP0709\nP0710\nP0739\nP0744\nP0758\nP0761\nP0773\nP0774\nP0785\nP0819\nP0825\nP0892\nP0994\nP1001\nP1006\nP1029\nP1043\nP1057\nP1060\nP1063\nP1067\nP1137\nP1154\nP1225\nP1295\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1039\nPID1045\nPID1046\nPID1065\nPID1068\nPID1077\nPID1081\nPID1086\nPID1091\nPID1092\nPID1095\nPID1098\nPID1102\nPID1113\nPID1122\nPID1128\nPID1133\nPID1137\nPID1165\nPID1167\nPID1170\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1258\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1370\nPID1371\nPID1382\nPID1392\nPID1399\nPID1420\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1470\nPID1485\nPID1489\nPID1494\nPID1496\nPID1511\nPID1516\nPID1547\nPID1557\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1603\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1653\nPID1663\nPID1673\nPID1677\nPID1678\nPID1684\nPID1705\nPID1732\nPID1761\nPID1784\nPID1791\nPID1876\nPID1877\nPID1912\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2224\nPID2233\nPID229\nPID2304\nPID239\nPID2431\nPID263\nPID305\nPID436\nPID450\nPID512\nPID518\nPID528\nPID647\nPID674\nPID675\nPID74\nPID770\nPID865\nPID884\nPID889\nPID894\nPID898\nPID901\nPID903\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID976\nPID982\nPID985\nPID988\nPID989\n\n\n\n\n7\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\npcTab &lt;- pcTab %&gt;%\n  mutate(sampleType = factor(ifelse(sampleType %in% c(\"PB\", \"BM aspirate\", \"Spleen\"), sampleType, \"others\")), \n         patID = factor(patID))\n\n\nadjusted p values\n\n# anova\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\")\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\")$p.value,\n           summary(aov(as.formula(paste0(pc, \"~\", fac)), pcTab))[[1]][[\"Pr(&gt;F)\"]][1])\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  group_by(`Batch factor`) %&gt;%\n  mutate(PC = factor(PC, levels = PC)) %&gt;%\n  ungroup() %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  mutate(\"-log(adj.p-value)\" = -log(`adj.p-value`)) \n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 90, size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Extracting p-value &lt; 0.01 with\" ~ bold('All samples'))) + facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nbatch correction\n\ndesign0 &lt;- model.matrix(~diagSimple, data = pcTab)\nall_batch &lt;- removeBatchEffect(assays(seAll)$qrilc, \n                               batch = pcTab$pelletSize,\n                               batch2 = pcTab$sampleType,\n                               design = design0)\n\nCoefficients not estimable: batch55 \n\n\nWarning: Partial NA coefficients for 6938 probe(s)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(all_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  mutate(sampleType = factor(ifelse(sampleType %in% c(\"PB\", \"BM aspirate\", \"Spleen\"), sampleType, \"others\")), \n         patID = factor(patID))\n\nJoining with `by = join_by(smpID)`\n\n# correlation test and anova\npvalTab_batch &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes_batch$x), function(pc){\n    ifelse(fac == \"pelletSize\", \n           cor.test(pcTab_batch[[pc]], pcTab_batch$pelletSize, method = \"kendall\")$p.value,\n           summary(aov(as.formula(paste0(pc, \"~\", fac)), pcTab_batch))[[1]][[\"Pr(&gt;F)\"]][1])\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n\nrownames(pvalTab_batch) &lt;- batVec\n\n\n\nboxplot of comparison\n\n# PC1: sampleType significant\npcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab[\"sampleType\", \"PC1\"], digits = 2), \n                      \" before batch correction\"))\n\n\n\npcTab_batch %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab_batch[\"sampleType\", \"PC1\"], digits = 2), \n                      \" after batch correction\"))\n\n\n\n# PC1: pelletSize significant\npcTab %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2),\n                      \" before batch correction\"))\n\n\n\npcTab_batch %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", format(pvalTab_batch[\"pelletSize\", \"PC1\"], digits = 2),\n                      \" after batch correction\"))"
  },
  {
    "objectID": "Diann_QC.html#healthy-samples",
    "href": "Diann_QC.html#healthy-samples",
    "title": "Diann_QC",
    "section": "Healthy samples",
    "text": "Healthy samples\n\n# vsn and imputaion\nseHthy &lt;- seDiann[, filter(patTab, diagSimple == \"healthy\")$smpID]\nseHthy &lt;- seHthy[rowSums(is.na(assay(seHthy)))/ncol(seHthy) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seHthy)$count)\nseHthy &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seHthy), \n                              rowData = rowData(seHthy))\nseHthy.imput &lt;- DEP::impute(seHthy, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seHthy.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  mutate(sampleType = factor(sampleType), patID = factor(patID))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n22\n\n\nSpleen\n13\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDonor 1205\nDonor 171590\nDonor 171779\nDonor 9200\nDonor 171944\nDonor 2204\nDonor 3208\nDonor 4208\nDonor 9209\nDonor 171532\nDonor 3206\n\n\n\n\n4\n4\n4\n4\n3\n3\n3\n3\n3\n2\n2\n\n\n\n\n\n\nadjusted p values\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\")\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\", exact = FALSE)$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value) #summary(aov(as.formula(paste0(pc, \"~\", fac)), pcTab))[[1]][[\"Pr(&gt;F)\"]][1]\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n\n\nboxplot\n\n# PC1: pelletSize significant\npcTab%&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2)))\n\n\n\n# PC1: sampleType significant\npcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", \n                      format(pvalTab[\"sampleType\", \"PC1\"], digits = 2)))"
  },
  {
    "objectID": "Diann_QC.html#without-healthy-samples",
    "href": "Diann_QC.html#without-healthy-samples",
    "title": "Diann_QC",
    "section": "Without healthy samples",
    "text": "Without healthy samples\n\n# vsn and imputaion\nseNoHthy &lt;- seDiann[, filter(patTab, diagSimple != \"healthy\" & !(sampleType %in% c(\"Pleural effusion\", \"Spleen biopsy\")))$smpID]\nseNoHthy &lt;- seNoHthy[rowSums(is.na(assay(seNoHthy)))/ncol(seNoHthy) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seNoHthy)$count)\nseNoHthy &lt;- SummarizedExperiment(assays = exprMat.vst, \n                                 colData = colData(seNoHthy), \n                                 rowData = rowData(seNoHthy))\nseNoHthy.imput &lt;- DEP::impute(seNoHthy, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seNoHthy.imput)), center = TRUE, scale. = TRUE)\n\n# waiting time annotation\nwtDF &lt;- readxl::read_excel  (\"data/ProteomisSampleWaitingTime_forJunyan.xlsx\")\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;%\n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n334\n\n\nBM aspirate\n28\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1712\nPID1564\nPID497\nPID935\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1418\nPID1419\nPID1662\nPID1844\nPID2105\nP0641\nP0782\nP1151\nPID1014\nPID1027\nPID110\nPID1109\nPID1200\nPID1246\nPID1344\nPID1350\nPID1359\nPID1450\nPID1456\nPID1517\nPID1561\nPID1579\nPID1624\nPID1670\nPID1694\nPID1704\nPID1893\nPID1982\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID961\nP0034\nP0057\nP0350\nP0361\nP0435\nP0444\nP0453\nP0511\nP0520\nP0527\nP0534\nP0535\nP0573\nP0584\nP0599\nP0680\nP0682\nP0683\nP0709\nP0710\nP0739\nP0744\nP0758\nP0761\nP0773\nP0774\nP0785\nP0819\nP0825\nP0892\nP0994\nP1001\nP1006\nP1029\nP1043\nP1057\nP1060\nP1063\nP1067\nP1137\nP1154\nP1225\nP1295\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1039\nPID1045\nPID1046\nPID1065\nPID1068\nPID1077\nPID1081\nPID1086\nPID1091\nPID1092\nPID1095\nPID1098\nPID1102\nPID1113\nPID1122\nPID1128\nPID1133\nPID1137\nPID1165\nPID1167\nPID1170\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1258\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1370\nPID1371\nPID1382\nPID1392\nPID1399\nPID1420\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1470\nPID1485\nPID1489\nPID1494\nPID1496\nPID1511\nPID1516\nPID1547\nPID1557\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1603\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1653\nPID1663\nPID1673\nPID1677\nPID1678\nPID1684\nPID1705\nPID1732\nPID1761\nPID1791\nPID1876\nPID1877\nPID1912\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2224\nPID2233\nPID229\nPID2304\nPID239\nPID2431\nPID263\nPID305\nPID436\nPID450\nPID512\nPID518\nPID528\nPID647\nPID674\nPID675\nPID74\nPID865\nPID884\nPID889\nPID894\nPID898\nPID901\nPID903\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID976\nPID982\nPID985\nPID988\nPID989\n\n\n\n\n7\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nknitr::kable(t(sort(table(pcTab$waitingDay), decreasing = TRUE)))\n\n\n\n\n0\n1\n2\n\n\n\n\n254\n101\n7\n\n\n\n\n\n\nadjusted p values\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\", \"waitingDay\")\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Before removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nbatch correction\n\ndesign0 &lt;- model.matrix(~diagSimple, data = pcTab)\nnoHthy_batch &lt;- removeBatchEffect(assay(seNoHthy.imput), \n                                  batch = pcTab$pelletSize, \n                                  batch2 = pcTab$sampleType, \n                                  design = design0)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(noHthy_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# correlation test and anova\npvalTab_batch &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes_batch$x), function(pc){\n    ifelse(fac == \"pelletSize\", \n           cor.test(pcTab_batch[[pc]], pcTab_batch$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab_batch)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab_batch) &lt;- batVec\n\n# extract significant pcs\nlogPTab_batch &lt;- pvalTab_batch %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab_batch %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"After removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab_batch, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nboxplot of comparison\n\n# PC10: sampleType significant\nstp_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC10, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \",\n                      format(pvalTab[\"sampleType\", \"PC10\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\nstp_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = sampleType, y = PC10, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \",\n                      format(pvalTab_batch[\"sampleType\", \"PC10\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(stp_p1, stp_p2)\n\n\n\n# PC1: pelletSize significant\npls_p1 &lt;- pcTab%&gt;%\n  ggplot(aes(x = pelletSize, y = PC1, fill = pelletSize)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nbefore batch correction\")) +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\npls_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1, fill = pelletSize)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab_batch[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nafter batch correction\")) +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(pls_p1, pls_p2)"
  },
  {
    "objectID": "Diann_QC.html#cll",
    "href": "Diann_QC.html#cll",
    "title": "Diann_QC",
    "section": "CLL",
    "text": "CLL\n\n# vsn and imputaion\nseCll &lt;- seDiann[, filter(patTab, diagSimple == \"CLL\")$smpID]\nseCll &lt;- seCll[rowSums(is.na(assay(seCll)))/ncol(seCll) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seCll)$count)\nseCll &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seCll), \n                              rowData = rowData(seCll))\nseCll.imput &lt;- DEP::impute(seCll, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seCll.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)  %&gt;%\n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n234\n\n\nBM aspirate\n16\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1564\nPID497\nPID935\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1419\nPID1662\nPID1844\nPID2105\nP0641\nPID1027\nPID110\nPID1200\nPID1246\nPID1450\nPID1517\nPID1624\nPID1670\nPID1704\nPID1893\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1065\nPID1068\nPID1077\nPID1086\nPID1091\nPID1095\nPID1098\nPID1102\nPID1128\nPID1133\nPID1165\nPID1167\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1382\nPID1392\nPID1399\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1489\nPID1494\nPID1496\nPID1511\nPID1547\nPID1561\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1673\nPID1678\nPID1694\nPID1705\nPID1761\nPID1791\nPID1876\nPID1877\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2233\nPID229\nPID2304\nPID239\nPID263\nPID305\nPID436\nPID512\nPID518\nPID528\nPID674\nPID675\nPID74\nPID884\nPID894\nPID898\nPID901\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID982\n\n\n\n\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nknitr::kable(t(sort(table(pcTab$waitingDay), decreasing = TRUE)))\n\n\n\n\n0\n1\n2\n\n\n\n\n162\n82\n6\n\n\n\n\n\n\nadjusted p values\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\", \"waitingDay\")\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Before removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nbatch correction (no design)\n\ncll_batch &lt;- removeBatchEffect(assay(seCll.imput), \n                               batch = pcTab$pelletSize)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(cll_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# correlation test and anova\npvalTab_batch &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes_batch$x), function(pc){\n    ifelse(fac == \"pelletSize\", \n           cor.test(pcTab_batch[[pc]], pcTab_batch$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab_batch)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab_batch) &lt;- batVec\n\n# extract significant pcs\nlogPTab_batch &lt;- pvalTab_batch %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab_batch %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"After removing batch: Extracting p-value &lt; 0.01\" ~ bold('with CLL samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab_batch, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nboxplot of comparison\n\n# PC1: waitingDay significant\nstp_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = waitingDay, y = PC1, fill = waitingDay)) +\n  geom_boxplot() +\n  labs(title = paste0(\"waitingDay: p-value is \", format(pvalTab[\"waitingDay\", \"PC1\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\nstp_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = waitingDay, y = PC1, fill = waitingDay)) +\n  geom_boxplot() +\n  labs(title = paste0(\"waitingDay: p-value is \", format(pvalTab_batch[\"waitingDay\", \"PC1\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(stp_p1, stp_p2)\n\n\n\n# PC1: pelletSize significant\npls_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\npls_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab_batch[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(pls_p1, pls_p2)"
  },
  {
    "objectID": "Spec_QC.html#all-samples",
    "href": "Spec_QC.html#all-samples",
    "title": "Spectronaut Quality Control",
    "section": "All samples",
    "text": "All samples\n\n# perform PCA\npcRes &lt;- prcomp(t(assays(seAll)$qrilc), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) \n\n# check and process batch factors first\n## pellet size, sampleType, patID, set\npcTab &lt;- mutate(pcTab, pelSimple = factor(case_when(\n  pelletSize &lt;= 0.1 ~ 0.1,\n  pelletSize &lt;= 0.2 & pelletSize &gt; 0.1 ~ 0.2, \n  pelletSize &lt;= 0.3 & pelletSize &gt; 0.2 ~ 0.3, \n  pelletSize &lt;= 0.4 & pelletSize &gt; 0.3 ~ 0.4,\n  pelletSize &lt;= 0.5 & pelletSize &gt; 0.4 ~ 0.5)), \n  sampleType = factor(sampleType), \n  patID = factor(patID), \n  set = factor(set))\n\npelNum &lt;- sort(table(pcTab$pelSimple), decreasing = TRUE)\nknitr::kable(pelNum)\n\n\n\n\nVar1\nFreq\n\n\n\n\n0.5\n325\n\n\n0.1\n50\n\n\n0.2\n10\n\n\n0.3\n8\n\n\n0.4\n5\n\n\n\n\nstpNum &lt;- sort(table(pcTab$sampleType), decreasing = TRUE)\nknitr::kable(stpNum)\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n355\n\n\nBM aspirate\n28\n\n\nSpleen\n13\n\n\nPleural effusion\n1\n\n\nSpleen biopsy\n1\n\n\n\n\npatNum &lt;- sort(table(pcTab$patID), decreasing = TRUE)\nknitr::kable(t(patNum))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1712\nPID1564\nPID497\nPID935\nDonor 1205\nDonor 171590\nDonor 171779\nDonor 9200\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nDonor 171944\nDonor 2204\nDonor 3208\nDonor 4208\nDonor 9209\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1418\nPID1419\nPID1662\nPID1844\nPID2105\nDonor 171532\nDonor 3206\nP0641\nP0782\nP1151\nPID1014\nPID1027\nPID110\nPID1109\nPID1200\nPID1246\nPID1344\nPID1350\nPID1359\nPID1450\nPID1456\nPID1517\nPID1561\nPID1579\nPID1624\nPID1670\nPID1694\nPID1704\nPID1893\nPID1982\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID961\nP0034\nP0057\nP0350\nP0361\nP0435\nP0444\nP0453\nP0511\nP0520\nP0527\nP0534\nP0535\nP0573\nP0584\nP0599\nP0680\nP0682\nP0683\nP0709\nP0710\nP0739\nP0744\nP0758\nP0761\nP0773\nP0774\nP0785\nP0819\nP0825\nP0892\nP0994\nP1001\nP1006\nP1029\nP1043\nP1057\nP1060\nP1063\nP1067\nP1137\nP1154\nP1225\nP1295\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1039\nPID1045\nPID1046\nPID1065\nPID1068\nPID1077\nPID1081\nPID1086\nPID1091\nPID1092\nPID1095\nPID1098\nPID1102\nPID1113\nPID1122\nPID1128\nPID1133\nPID1137\nPID1165\nPID1167\nPID1170\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1258\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1370\nPID1371\nPID1382\nPID1399\nPID1420\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1470\nPID1485\nPID1489\nPID1494\nPID1496\nPID1511\nPID1516\nPID1547\nPID1557\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1603\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1653\nPID1663\nPID1673\nPID1677\nPID1678\nPID1684\nPID1705\nPID1732\nPID1761\nPID1784\nPID1791\nPID1876\nPID1877\nPID1912\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2224\nPID2233\nPID229\nPID2304\nPID239\nPID2431\nPID263\nPID305\nPID436\nPID450\nPID512\nPID518\nPID528\nPID647\nPID674\nPID675\nPID74\nPID770\nPID865\nPID884\nPID889\nPID894\nPID898\nPID901\nPID903\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID976\nPID982\nPID985\nPID988\nPID989\n\n\n\n\n7\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nsetNum &lt;- sort(table(pcTab$set), decreasing = TRUE)\nknitr::kable(setNum)\n\n\n\n\nVar1\nFreq\n\n\n\n\nCLL\n113\n\n\nBTKi\n111\n\n\nLymphoma/HCL\n86\n\n\nLymphoma/HCL, BTKi\n27\n\n\nCLL/BTKi\n23\n\n\nTest, BTKi\n3\n\n\n\n\n\n\np values\n\n# anova\nbatList &lt;- list(\"pelSimple\" = pelNum, \"sampleType\" = stpNum, \"patID\" = patNum, \"set\" = setNum)\npvalTab &lt;- lapply(names(batList), function(fac){\n  print(fac)\n  data &lt;- pcTab[pcTab[[fac]] %in% names(batList[[fac]][batList[[fac]] &gt; 1]), ]\n  sapply(colnames(pcRes$x), function(pc){\n    res_aov &lt;- aov(as.formula(paste0(pc, \"~\", fac)), data = data) \n    summary(res_aov)[[1]][[\"Pr(&gt;F)\"]][1]\n    })\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelSimple\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"set\"\n\nrownames(pvalTab) &lt;- names(batList)\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"P-value\") %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  group_by(`Batch factor`) %&gt;%\n  mutate(PC = factor(PC, levels = PC)) %&gt;%\n  ungroup() %&gt;%\n  filter(`P-value` &lt; 0.01) %&gt;%\n  mutate(\"-log(p-value)\" = -log(`P-value`)) \n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(p-value)`, fill = `Batch factor`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 90, size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Extracting p-value &lt; 0.01 with \" ~ bold('All samples')))\n\n\n\n\n\n\nbatch correction\n\ndesign0 &lt;- model.matrix(~diagSimple, data = pcTab)\nall_batch &lt;- removeBatchEffect(assays(seAll)$qrilc, \n                               batch = pcTab$pelSimple, \n                               batch2 = pcTab$sampleType, \n                               design = design0)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(all_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab)\n\nJoining with `by = join_by(smpID)`\n\npcTab_batch &lt;- mutate(pcTab_batch, pelSimple = factor(case_when(\n  pelletSize &lt;= 0.1 ~ 0.1,\n  pelletSize &lt;= 0.2 & pelletSize &gt; 0.1 ~ 0.2, \n  pelletSize &lt;= 0.3 & pelletSize &gt; 0.2 ~ 0.3, \n  pelletSize &lt;= 0.4 & pelletSize &gt; 0.3 ~ 0.4,\n  pelletSize &lt;= 0.5 & pelletSize &gt; 0.4 ~ 0.5)), \n  sampleType = factor(sampleType), \n  patID = factor(patID), \n  set = factor(set))\n\n# anova\npvalTab_batch &lt;- lapply(names(batList), function(fac){\n  print(fac)\n  data &lt;- pcTab_batch[pcTab_batch[[fac]] %in% names(batList[[fac]][batList[[fac]] &gt; 1]), ]\n  sapply(colnames(pcRes_batch$x), function(pc){\n    res_aov &lt;- aov(as.formula(paste0(pc, \"~\", fac)), data = data) \n    summary(res_aov)[[1]][[\"Pr(&gt;F)\"]][1]\n    })\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelSimple\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"set\"\n\nrownames(pvalTab_batch) &lt;- names(batList)\n\n\n\nboxplot of comparison\n\n# PC1: sampleType significant\npcTab[pcTab$sampleType %in% names(stpNum[stpNum &gt; 1]), ] %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab[\"sampleType\", \"PC1\"], digits = 2), \n                      \" before batch correction\"))\n\n\n\npcTab_batch[pcTab_batch$sampleType %in% names(stpNum[stpNum &gt; 1]), ] %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab_batch[\"sampleType\", \"PC1\"], digits = 2), \n                      \" after batch correction\"))\n\n\n\n# PC6: pelletSize significant\npcTab[pcTab$pelSimple %in% names(pelNum[pelNum &gt; 1]), ] %&gt;%\n  ggplot(aes(x = pelSimple, y = PC6, fill = pelSimple)) +\n  geom_boxplot()  +\n  labs(title = paste0(\"pelletSize: p-value is \", format(pvalTab[\"pelSimple\", \"PC6\"], digits = 2),\n                      \" before batch correction\"))\n\n\n\npcTab_batch[pcTab_batch$pelSimple %in% names(pelNum[pelNum &gt; 1]), ] %&gt;%\n  ggplot(aes(x = pelSimple, y = PC6, fill = pelSimple)) +\n  geom_boxplot()  +\n  labs(title = paste0(\"pelletSize: p-value is \", format(pvalTab_batch[\"pelSimple\", \"PC6\"], digits = 2),\n                      \" after batch correction\"))"
  },
  {
    "objectID": "Spec_QC.html#healthy-samples",
    "href": "Spec_QC.html#healthy-samples",
    "title": "Spectronaut Quality Control",
    "section": "Healthy samples",
    "text": "Healthy samples\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\")\n# vsn and imputaion\nseHthy &lt;- seSpec[, filter(patTab, diagSimple == \"healthy\")$smpID]\nseHthy &lt;- seHthy[rowSums(is.na(assay(seHthy)))/ncol(seHthy) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seHthy)$count)\nseHthy &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seHthy), \n                              rowData = rowData(seHthy))\nseHthy.imput &lt;- DEP::impute(seHthy, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seHthy.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  mutate(sampleType = factor(sampleType), patID = factor(patID))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n22\n\n\nSpleen\n13\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDonor 1205\nDonor 171590\nDonor 171779\nDonor 9200\nDonor 171944\nDonor 2204\nDonor 3208\nDonor 4208\nDonor 9209\nDonor 171532\nDonor 3206\n\n\n\n\n4\n4\n4\n4\n3\n3\n3\n3\n3\n2\n2\n\n\n\n\n\n\nadjusted p values\n\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\", exact = FALSE)$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n\n\nboxplot of comparison\n\n# PC1: pelletSize significant\npcTab%&gt;%\n  ggplot(aes(x = pelletSize, y = PC1)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2)))\n\n\n\n# PC1: sampleType significant\npcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC1, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", \n                      format(pvalTab[\"sampleType\", \"PC1\"], digits = 2)))"
  },
  {
    "objectID": "Spec_QC.html#without-healthy-samples",
    "href": "Spec_QC.html#without-healthy-samples",
    "title": "Spectronaut Quality Control",
    "section": "Without healthy samples",
    "text": "Without healthy samples\n\n# vsn and imputaion\nseNoHthy &lt;- seSpec[, filter(patTab, diagSimple != \"healthy\" & !(sampleType %in% c(\"Pleural effusion\", \"Spleen biopsy\")))$smpID]\nseNoHthy &lt;- seNoHthy[, - which(colnames(seNoHthy) %in% \"S454710\")]\nseNoHthy &lt;- seNoHthy[rowSums(is.na(assay(seNoHthy)))/ncol(seNoHthy) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seNoHthy)$count)\nseNoHthy &lt;- SummarizedExperiment(assays = exprMat.vst,\n                                 colData = colData(seNoHthy), \n                                 rowData = rowData(seNoHthy))\nseNoHthy.imput &lt;- DEP::impute(seNoHthy, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seNoHthy.imput)), center = TRUE, scale. = TRUE)\n\n# waiting time annotation\nwtDF &lt;- readxl::read_excel  (\"data/ProteomisSampleWaitingTime_forJunyan.xlsx\")\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;%\n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n333\n\n\nBM aspirate\n28\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1712\nPID1564\nPID497\nPID935\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1418\nPID1419\nPID1662\nPID1844\nPID2105\nP0641\nP0782\nP1151\nPID1014\nPID1027\nPID110\nPID1109\nPID1200\nPID1246\nPID1344\nPID1350\nPID1359\nPID1450\nPID1456\nPID1517\nPID1561\nPID1579\nPID1624\nPID1670\nPID1694\nPID1704\nPID1893\nPID1982\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID961\nP0034\nP0057\nP0350\nP0361\nP0435\nP0444\nP0453\nP0511\nP0520\nP0527\nP0534\nP0535\nP0573\nP0584\nP0599\nP0680\nP0682\nP0683\nP0709\nP0710\nP0739\nP0744\nP0758\nP0761\nP0773\nP0774\nP0785\nP0819\nP0825\nP0892\nP0994\nP1001\nP1006\nP1029\nP1043\nP1057\nP1060\nP1063\nP1067\nP1137\nP1154\nP1225\nP1295\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1039\nPID1045\nPID1046\nPID1065\nPID1068\nPID1077\nPID1081\nPID1086\nPID1091\nPID1092\nPID1095\nPID1098\nPID1102\nPID1113\nPID1122\nPID1128\nPID1133\nPID1137\nPID1165\nPID1167\nPID1170\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1258\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1370\nPID1371\nPID1382\nPID1399\nPID1420\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1470\nPID1485\nPID1489\nPID1494\nPID1496\nPID1511\nPID1516\nPID1547\nPID1557\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1603\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1653\nPID1663\nPID1673\nPID1677\nPID1678\nPID1684\nPID1705\nPID1732\nPID1761\nPID1791\nPID1876\nPID1877\nPID1912\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2224\nPID2233\nPID229\nPID2304\nPID239\nPID2431\nPID263\nPID305\nPID436\nPID450\nPID512\nPID518\nPID528\nPID647\nPID674\nPID675\nPID74\nPID865\nPID884\nPID889\nPID894\nPID898\nPID901\nPID903\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID976\nPID982\nPID985\nPID988\nPID989\n\n\n\n\n7\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nknitr::kable(t(sort(table(pcTab$waitingDay), decreasing = TRUE)))\n\n\n\n\n0\n1\n2\n\n\n\n\n253\n101\n7\n\n\n\n\n\n\nadjusted p values\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\", \"waitingDay\")\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Before removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nbatch correction\n\ndesign0 &lt;- model.matrix(~diagSimple, data = pcTab)\nnoHthy_batch &lt;- removeBatchEffect(assay(seNoHthy.imput), \n                                  batch = pcTab$pelletSize, \n                                  batch2 = pcTab$sampleType, \n                                  design = design0)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(noHthy_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# correlation test and anova\npvalTab_batch &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes_batch$x), function(pc){\n    ifelse(fac == \"pelletSize\", \n           cor.test(pcTab_batch[[pc]], pcTab_batch$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab_batch)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab_batch) &lt;- batVec\n\n# extract significant pcs\nlogPTab_batch &lt;- pvalTab_batch %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab_batch %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"After removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab_batch, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nboxplot of comparison\n\n# PC8: sampleType significant\nstp_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC8, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \",\n                      format(pvalTab[\"sampleType\", \"PC8\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\nstp_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = sampleType, y = PC8, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \",\n                      format(pvalTab_batch[\"sampleType\", \"PC8\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(stp_p1, stp_p2)\n\n\n\n# PC1: pelletSize significant\npls_p1 &lt;- pcTab%&gt;%\n  ggplot(aes(x = pelletSize, y = PC1, fill = pelletSize)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nbefore batch correction\")) +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\npls_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = pelletSize, y = PC1, fill = pelletSize)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab_batch[\"pelletSize\", \"PC1\"], digits = 2),\n                      \"\\nafter batch correction\")) +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(pls_p1, pls_p2)"
  },
  {
    "objectID": "Spec_QC.html#cll",
    "href": "Spec_QC.html#cll",
    "title": "Spectronaut Quality Control",
    "section": "CLL",
    "text": "CLL\n\n# vsn and imputaion\nseCll &lt;- seSpec[, filter(patTab, diagSimple == \"CLL\")$smpID]\nseCll &lt;- seCll[, - which(colnames(seCll) %in% \"S454710\")]\nseCll &lt;- seCll[rowSums(is.na(assay(seCll)))/ncol(seCll) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seCll)$count)\nseCll &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seCll), \n                              rowData = rowData(seCll))\nseCll.imput &lt;- DEP::impute(seCll, \"QRILC\")\n\nImputing along margin 2 (samples/columns).\n\n# pca\npcRes &lt;- prcomp(t(assay(seCll.imput)), center = TRUE, scale. = TRUE)\n\npcTab &lt;- pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;%\n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# check and process batch factors first\n## sampleType, patID\nknitr::kable(sort(table(pcTab$sampleType), decreasing = TRUE))\n\n\n\n\nVar1\nFreq\n\n\n\n\nPB\n233\n\n\nBM aspirate\n16\n\n\n\n\nknitr::kable(t(sort(table(pcTab$patID), decreasing = TRUE)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPID1564\nPID497\nPID935\nP0050\nP0314\nP0353\nP0777\nPID1191\nPID1457\nPID1691\nPID1913\nPID859\nPID934\nPID940\nP0508\nP0734\nPID1009\nPID1023\nPID1146\nPID1201\nPID1203\nPID1229\nPID1264\nPID1340\nPID1419\nPID1662\nPID1844\nPID2105\nP0641\nPID1027\nPID110\nPID1200\nPID1246\nPID1450\nPID1517\nPID1624\nPID1670\nPID1704\nPID1893\nPID2168\nPID279\nPID301\nPID883\nPID907\nPID1013\nPID1015\nPID1016\nPID1022\nPID1024\nPID1035\nPID1036\nPID1065\nPID1068\nPID1077\nPID1086\nPID1091\nPID1095\nPID1098\nPID1102\nPID1128\nPID1133\nPID1165\nPID1167\nPID1171\nPID1173\nPID1176\nPID1177\nPID1179\nPID1192\nPID1199\nPID121\nPID1210\nPID1211\nPID1222\nPID1226\nPID1228\nPID1242\nPID1247\nPID1248\nPID1260\nPID1274\nPID1276\nPID1280\nPID1285\nPID1293\nPID1301\nPID1307\nPID1318\nPID1332\nPID1342\nPID1349\nPID1382\nPID1399\nPID1437\nPID1438\nPID1439\nPID1440\nPID1454\nPID1461\nPID1462\nPID1469\nPID1489\nPID1494\nPID1496\nPID1511\nPID1547\nPID1561\nPID1565\nPID1590\nPID1591\nPID1601\nPID1602\nPID1617\nPID1634\nPID1637\nPID1638\nPID1644\nPID1650\nPID1673\nPID1678\nPID1694\nPID1705\nPID1761\nPID1791\nPID1876\nPID1877\nPID1976\nPID1997\nPID2031\nPID2036\nPID2060\nPID2072\nPID2089\nPID2115\nPID2202\nPID2233\nPID229\nPID2304\nPID239\nPID263\nPID305\nPID436\nPID512\nPID518\nPID528\nPID674\nPID675\nPID74\nPID884\nPID894\nPID898\nPID901\nPID909\nPID951\nPID952\nPID955\nPID957\nPID963\nPID970\nPID982\n\n\n\n\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nknitr::kable(t(sort(table(pcTab$waitingDay), decreasing = TRUE)))\n\n\n\n\n0\n1\n2\n\n\n\n\n161\n82\n6\n\n\n\n\n\n\nadjusted p values\n\nbatVec &lt;- c(\"pelletSize\", \"sampleType\", \"patID\", \"waitingDay\")\n# correlation test and anova\npvalTab &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes$x), function(pc){\n    ifelse(fac == \"pelletSize\",\n           cor.test(pcTab[[pc]], pcTab$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab) &lt;- batVec\n\n# extract significant pcs\nlogPTab &lt;- pvalTab %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(size = 8), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"Before removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nbatch correction (no design)\n\ncll_batch &lt;- removeBatchEffect(assay(seCll.imput), \n                               batch = pcTab$pelletSize, \n                               batch2 = pcTab$sampleType)\n\n# perform PCA\npcRes_batch &lt;- prcomp(t(cll_batch), center = TRUE, scale. = TRUE)\n\npcTab_batch &lt;- pcRes_batch$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(patTab) %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(sampleType = factor(sampleType), \n         patID = factor(patID),\n         waitingDay = factor(WaitingTime_day))\n\nJoining with `by = join_by(smpID)`\n\n# correlation test and anova\npvalTab_batch &lt;- lapply(batVec, function(fac){\n  print(fac)\n  sapply(colnames(pcRes_batch$x), function(pc){\n    ifelse(fac == \"pelletSize\", \n           cor.test(pcTab_batch[[pc]], pcTab_batch$pelletSize, method = \"kendall\")$p.value,\n           kruskal.test(as.formula(paste0(pc, \"~\", fac)), pcTab_batch)$p.value)\n    }) %&gt;% p.adjust(\"BH\")\n}) %&gt;% do.call(rbind, .)\n\n[1] \"pelletSize\"\n[1] \"sampleType\"\n[1] \"patID\"\n[1] \"waitingDay\"\n\nrownames(pvalTab_batch) &lt;- batVec\n\n# extract significant pcs\nlogPTab_batch &lt;- pvalTab_batch %&gt;% as_tibble(rownames = \"Batch factor\") %&gt;%\n  pivot_longer(-`Batch factor`, names_to = \"PC\", values_to = \"adj.p-value\") %&gt;%\n  left_join(as_tibble(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, rownames = \"PC\"), by = c(\"PC\" = \"PC\")) %&gt;%\n  filter(`adj.p-value` &lt; 0.01) %&gt;%\n  separate(col = \"PC\", into = c(\"a\", \"PC\"), sep = \"PC\") %&gt;%\n  select(-a) %&gt;%\n  mutate(PC = factor(PC, levels = sort(as.numeric(unique(PC)))),\n         \"explained variance\" = paste0(PC, \" (\", value, \"%)\"), \n         \"-log(adj.p-value)\" = -log(`adj.p-value`))\n\n# plot\nlogPTab_batch %&gt;%\n  ggplot(aes(x = PC, y = `-log(adj.p-value)`, fill = `Batch factor`, labels = `explained variance`)) +\n  geom_bar(stat = \"identity\") + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 45, size = 8, vjust = 1, hjust = 1), \n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = bquote(\"After removing batch: Extracting p-value &lt; 0.01\" ~ bold('without healthy samples'))) + \n  scale_x_discrete(labels = unique(arrange(logPTab_batch, PC)$`explained variance`)) +\n  facet_wrap(~`Batch factor`, ncol = 1)\n\n\n\n\n\n\nboxplot of comparison\n\n# PC6: sampleType significant\nstp_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = sampleType, y = PC6, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab[\"sampleType\", \"PC6\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\nstp_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = sampleType, y = PC6, fill = sampleType)) +\n  geom_boxplot() +\n  labs(title = paste0(\"sampleType: p-value is \", format(pvalTab_batch[\"sampleType\", \"PC6\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(stp_p1, stp_p2)\n\n\n\n# PC2: pelletSize significant\npls_p1 &lt;- pcTab %&gt;%\n  ggplot(aes(x = pelletSize, y = PC2)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab[\"pelletSize\", \"PC2\"], digits = 2),\n                      \"\\nbefore batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\npls_p2 &lt;- pcTab_batch %&gt;%\n  ggplot(aes(x = pelletSize, y = PC2)) +\n  geom_point() +\n  labs(title = paste0(\"pelletSize: p-value is \", \n                      format(pvalTab_batch[\"pelletSize\", \"PC2\"], digits = 2),\n                      \"\\nafter batch correction\")) + \n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\ncowplot::plot_grid(pls_p1, pls_p2)"
  },
  {
    "objectID": "Diann_QC.html#all-sample-plot",
    "href": "Diann_QC.html#all-sample-plot",
    "title": "Diann_QC",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\ndiagOrd &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(n = length(smpID)) %&gt;% \n  arrange(desc(n)) %&gt;%\n  pull(diag)\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag, levels = diagOrd))\nsmpAnno &lt;- smpAnno[order(match(smpAnno$diag, diagOrd)), ]\nsmpAnno$ID &lt;- factor(smpAnno$ID, levels = smpAnno$ID)\n\npreData &lt;- assays(seDiann)$log2 %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  filter(!is.na(count)) %&gt;%\n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\ncusCols &lt;- c(\"#15A371\", \"green\", \"#A8F0BA\", \"blue\", \"#5083D1\", \"#8ECCF5\", \"cyan\", \n             \"#ED1379\", \"maroon1\", \"purple\", \"#AD9490\", \"brown\", \"red\", \"yellow\", \n             \"#E8CF15\", \"#F2D39B\", \"lightsalmon1\", \"antiquewhite\", \"black\", \"darkorange\")\nggplot(preData, aes(x = ID, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_blank(), legend.position = \"bottom\", legend.text = element_text(size = 7)) +\n  guides(fill = guide_legend(nrow = 7, byrow = TRUE)) + scale_fill_manual(values = cusCols)\n\n\n\n\n\npatTab &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")) \n\n# diagSimple vs pelletSize\nggplot(patTab, aes(x = diagSimple, y = pelletSize, fill = diagSimple)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() + theme_bw()\n\n\n\n#  diagSimple vs sampleTpe\ntable(patTab[, c(\"diagSimple\", \"sampleType\")])  %&gt;% as.data.frame() %&gt;%\n  ggpubr::ggballoonplot(fill = \"value\", size.range = c(0, 15)) +\n  scale_fill_viridis_c(option = \"C\")\n\n\n\n# pelletSize vs sampleTpe\nggplot(patTab, aes(x = sampleType, y = pelletSize, fill = sampleType)) +\n  geom_violin(adjust = 1, trim = TRUE, scale = \"width\") + \n  geom_jitter() +\n  theme_bw()\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped."
  },
  {
    "objectID": "DE.html",
    "href": "DE.html",
    "title": "DE",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag))\n# filter samples\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\n# filter proteins\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\n# normalization\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\n\n#imputation\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nWarning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\nthan is installed on your system (1.0.11). This might lead to errors\nwhen loading mzR. If you encounter such issues, please send a report,\nincluding the output of sessionInfo() to the Bioc support forum at \nhttps://support.bioconductor.org/. For details see also\nhttps://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n\n\nImputing along margin 2 (samples/columns).\n\n# visualisation\ncolData(seSub.imput) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = count), vjust = 1)\n\n\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs HCL\")\n\n\n\n\n(\n\n\n\n# train glm with lasso, 3-cv and 50 epochs\ny &lt;- ifelse(colData(seSub.imput)$diag == \"CLL\", 1, 0)\nx &lt;- t(assay(seSub.imput))\ncoefMat &lt;- lapply(1:50, function(n){\n  cv.lasso &lt;- cv.glmnet(x = x,\n                        y = y, \n                        family = \"binomial\",\n                        alpha = 1,\n                        nfolds = 3) #lasso\n  coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% as.matrix()\n  \n}) %&gt;% do.call(cbind, .)\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\ncolnames(coefMat) &lt;- 1:50\n\n# boxplot\ncoefMat[rowMeans(coefMat) &gt; 0, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  filter(protID != \"(Intercept)\") %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot() +\n  geom_jitter(size = 0.05) + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# barplot\napply(coefMat, 1, function(v){\n  c(mean = mean(v), sd = sd(v))\n}) %&gt;% t() %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  filter(mean &gt; 0 & protID != \"(Intercept)\") %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean-sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")"
  },
  {
    "objectID": "DE.html#cll-vs-hcl",
    "href": "DE.html#cll-vs-hcl",
    "title": "DE",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diag = factor(diag))\n# filter samples\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\n# filter proteins\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\n# normalization\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\n\n#imputation\nseSub.imput &lt;- DEP::impute(seSub, \"QRILC\")\n\nWarning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\nthan is installed on your system (1.0.11). This might lead to errors\nwhen loading mzR. If you encounter such issues, please send a report,\nincluding the output of sessionInfo() to the Bioc support forum at \nhttps://support.bioconductor.org/. For details see also\nhttps://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n\n\nImputing along margin 2 (samples/columns).\n\n# visualisation\ncolData(seSub.imput) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = count), vjust = 1)\n\n\n\npcRes &lt;- prcomp(t(assay(seSub.imput)), center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs HCL\")\n\n\n\n\n(\n\n\n\n# train glm with lasso, 3-cv and 50 epochs\ny &lt;- ifelse(colData(seSub.imput)$diag == \"CLL\", 1, 0)\nx &lt;- t(assay(seSub.imput))\ncoefMat &lt;- lapply(1:50, function(n){\n  cv.lasso &lt;- cv.glmnet(x = x,\n                        y = y, \n                        family = \"binomial\",\n                        alpha = 1,\n                        nfolds = 3) #lasso\n  coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% as.matrix()\n  \n}) %&gt;% do.call(cbind, .)\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\nWarning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one\nmultinomial or binomial class has fewer than 8 observations; dangerous ground\n\ncolnames(coefMat) &lt;- 1:50\n\n# boxplot\ncoefMat[rowMeans(coefMat) &gt; 0, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  filter(protID != \"(Intercept)\") %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot() +\n  geom_jitter(size = 0.05) + \n  theme_bw() + \n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# barplot\napply(coefMat, 1, function(v){\n  c(mean = mean(v), sd = sd(v))\n}) %&gt;% t() %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  filter(mean &gt; 0 & protID != \"(Intercept)\") %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean-sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")"
  },
  {
    "objectID": "Diann_DE.html",
    "href": "Diann_DE.html",
    "title": "Diann Differential Expression",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\n# selDiags &lt;- sort(table(colData(seDiann)$diag))\n# names(selDiags[selDiags &gt;= 5])\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\"))) %&gt;%\n  mutate(diag = factor(diag))\n\n# CLL vs HCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seDiann[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/Diann_impList.RDS\")"
  },
  {
    "objectID": "Diann_DE.html#cll-vs-hcl",
    "href": "Diann_DE.html#cll-vs-hcl",
    "title": "Diann Differential Expression",
    "section": "CLL vs HCL",
    "text": "CLL vs HCL\ndata and pc plot\n\ncolData(deList$cll2hcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2hcl.mat &lt;- filList$cll2hcl$reduced\npcRes &lt;- prcomp(cll2hcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs HCL\") +\n  theme_bw() +\n  geom_text(data = plotPc[plotPc$diag == \"HCL\" & plotPc$PC1 &gt; 0, ], \n            aes(label = smpID), col = \"black\", nudge_x = 5, nudge_y = 5, size = 5) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\noutId &lt;- which(rownames(cll2hcl.mat) %in% \"S454563\")\ncll2hcl.mat &lt;- cll2hcl.mat[-outId, ]\ny &lt;- ifelse(colData(deList$cll2hcl)[-outId, ]$diag == \"CLL\", 1, 0)\n\n\nGeneralized Linear Model\nremove “S454563” that perhaps is a mis-annotation sample\n\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2hcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 27.266   0.267  27.550 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrDiann &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2hcl\")\n\n\n\nVisualization\n\nNR &lt;- 30 # around 30 features selected \n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6538 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2hcl[, -outId]) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"HCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2hcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Diann_DE.html#impute",
    "href": "Diann_DE.html#impute",
    "title": "Diann Differential Expression",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\n# selDiags &lt;- sort(table(colData(seDiann)$diag))\n# names(selDiags[selDiags &gt;= 5])\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\"))) %&gt;%\n  mutate(diag = factor(diag))\n\n# CLL vs HCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seDiann[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/Diann_impList.RDS\")"
  },
  {
    "objectID": "Diann_DE.html#remove-high-correlated-features",
    "href": "Diann_DE.html#remove-high-correlated-features",
    "title": "Diann Differential Expression",
    "section": "Remove high-correlated features",
    "text": "Remove high-correlated features\nstandardization and correlation\n\nimpList &lt;- readRDS(\"output/Diann_impList.RDS\")\n# system.time({\n#   n_cores &lt;- detectCores(logical = FALSE)\n#   cl &lt;- makeCluster(n_cores - 1)\n#   sdList &lt;- parLapply(cl, map(impList, assay), mscale)\n#   clusterExport(cl, varlist = \"sdList\", envir = environment())\n#   filList &lt;- parLapply(cl, map(sdList, t), removeCorrelatedTargets)\n#   })\n# stopCluster(cl)\n# saveRDS(filList, \"output/Diann_filList.RDS\")\n\nfilList &lt;- readRDS(\"output/Diann_filList.RDS\")\ntibble(\"data\" = names(filList), `initial` = unlist(map(map(impList, dim), ~.[1]))) %&gt;%\n  left_join(as_tibble(rownames = \"data\", \n                      unlist(map(map(map(filList, ~.$reduced), dim), ~.[2])))) %&gt;%\n  setNames(c(\"data\", \"initial\", \"filtered\")) %&gt;%\n  pivot_longer(-data, names_to = \"group\", values_to = \"protein amount\") %&gt;%\n  mutate(group = factor(group, levels = c(\"initial\", \"filtered\"))) %&gt;%\n  ggplot(aes(x = data, y = `protein amount`, fill = group)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c('#999999','#E69F00')) +\n  theme_bw(base_line_size = 0, base_rect_size = 0) +\n  geom_text(aes(label = `protein amount`), \n             position = position_dodge(width = 1), vjust = 1.5) +\n  ggtitle(\"Comparison between initial and filtered proteins by correlation\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nJoining with `by = join_by(data)`"
  },
  {
    "objectID": "Diann_DE.html#differential-expression",
    "href": "Diann_DE.html#differential-expression",
    "title": "DE",
    "section": "Differential Expression",
    "text": "Differential Expression\n\nCLL vs HCL\ndata and pc plot\n\ncolData(deList$cll2hcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2hcl.mat &lt;- filList$cll2hcl$reduced\npcRes &lt;- prcomp(cll2hcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs HCL\") +\n  theme_bw() +\n  geom_text(data = plotPc[plotPc$diag == \"HCL\" & plotPc$PC1 &gt; 0, ], \n            aes(label = smpID), col = \"black\", nudge_x = 5, nudge_y = 5, size = 5) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\noutId &lt;- which(rownames(cll2hcl.mat) %in% \"S454563\")\ncll2hcl.mat &lt;- cll2hcl.mat[-outId, ]\ny &lt;- ifelse(colData(deList$cll2hcl)[-outId, ]$diag == \"CLL\", 1, 0)\n# # after batch removal\n# design0 &lt;- model.matrix(~diag, data = colData(seSub.imput))\n# matrix_batch &lt;- removeBatchEffect(assay(seSub.imput), \n#                                   batch = colData(seSub.imput)$sampleType, \n#                                   design = design0)\n# \n# pcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\n# plotPc_batch &lt;- pcRes_batch$x %&gt;% \n#   as_tibble(rownames = \"smpID\") %&gt;% \n#   left_join(smpAnno)\n# plotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n# plotPc_batch %&gt;%\n#   ggplot(aes(x = PC1, y = PC2, col = diag)) +\n#   geom_point() +\n#   labs(x = paste0(\"PC1 (\", plotVar_batch[1, ]$value,\"%)\"), \n#        y = paste0(\"PC2 (\", plotVar_batch[2, ]$value,\"%)\"))\n\n\nGeneralized Linear Model\nremove “S454563” that perhaps is a mis-annotation sample\n\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2hcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 26.533   0.285  26.824 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\n\n\nVisualization\n\nNR &lt;- 30 # around 30 features selected \n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6538 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2hcl[, -outId]) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"HCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2hcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\nCLL vs MCL\n\ncolData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mcl.mat &lt;- filList$cll2mcl$reduced\npcRes &lt;- prcomp(cll2mcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), cbind(pcRes$x, colData(deList$cll2mcl)))$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:20][pvalTab_diag[1:20] &lt; 0.05])\n\n         PC6          PC4          PC1          PC2          PC5 \n5.742604e-12 3.427827e-05 3.175356e-02 3.175356e-02 3.756276e-02 \n\nplotPc %&gt;%\n  ggplot(aes(x = PC4, y = PC6, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC4 (\", plotVar[4, ]$value,\"%)\"), \n       y = paste0(\"PC6 (\", plotVar[6, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(colData(deList$cll2mcl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 67.182   0.233  67.419 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6556 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2mcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\n\n\n\nCLL vs Other\n\nsmpAnno_cll2other &lt;- colData(deList$cll2other) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diagSimple = ifelse(diag == \"CLL\", \"CLL\", \"other\")) \nsmpAnno_cll2other %&gt;%\n  group_by(diagSimple) %&gt;%\n  summarise(count = length(diagSimple)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diagSimple, y = count, fill = diagSimple)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2other.mat &lt;- filList$cll2other$reduced\npcRes &lt;- prcomp(cll2other.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diagSimple\")), cbind(pcRes$x, smpAnno_cll2other))$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:20][pvalTab_diag[1:20] &lt; 0.05])\n\n         PC3 \n4.512632e-05 \n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC3, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC3 (\", plotVar[3, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(smpAnno_cll2other$diagSimple == \"CLL\", 1, 0)\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2other.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 51.295   0.161  51.462 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6537 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- smpAnno_cll2other %&gt;%\n  select(smpID, diagSimple) %&gt;%\n  arrange(diagSimple) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diagSimple = c(\"CLL\" = \"#B4E4A4\", \"other\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2other.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\nCLL vs SMZL\n\ncolData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2smzl.mat &lt;- filList$cll2smzl$reduced\npcRes &lt;- prcomp(cll2smzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), cbind(pcRes$x, colData(deList$cll2smzl)))$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:20][pvalTab_diag[1:20] &lt; 0.05])\n\nnamed numeric(0)\n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs SMZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(colData(deList$cll2smzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2smzl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 12.505   0.082  12.588 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6547 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"SMZL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2smzl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\nCLL vs MZL\n\ncolData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mzl.mat &lt;- filList$cll2mzl$reduced\npcRes &lt;- prcomp(cll2mzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs MZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), cbind(pcRes$x, colData(deList$cll2mzl)))$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:20][pvalTab_diag[1:20] &lt; 0.05])\n\nnamed numeric(0)\n\nplotPc %&gt;%\n  ggplot(aes(x = PC3, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC3 (\", plotVar[3, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs MZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(colData(deList$cll2mzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mzl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 14.150   0.109  14.259 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6539 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MZL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2mzl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Untitled",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\n# selDiags &lt;- sort(table(colData(seDiann)$diag))\n# names(selDiags[selDiags &gt;= 5])\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")))\n\n# CLL vs HCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seDiann[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/impList.RDS\")"
  },
  {
    "objectID": "Untitled.html#impute",
    "href": "Untitled.html#impute",
    "title": "Untitled",
    "section": "",
    "text": "load(\"output/seDiann.RData\")\n# selDiags &lt;- sort(table(colData(seDiann)$diag))\n# names(selDiags[selDiags &gt;= 5])\nsmpAnno &lt;- colData(seDiann) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\")))\n\n# CLL vs HCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seDiann[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seDiann[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4))$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seDiann)))/ncol(seDiann) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/impList.RDS\")"
  },
  {
    "objectID": "Untitled.html#remove-high-correlated-features",
    "href": "Untitled.html#remove-high-correlated-features",
    "title": "Untitled",
    "section": "Remove high-correlated features",
    "text": "Remove high-correlated features\nstandardization and correlation\n\nimpList &lt;- readRDS(\"output/impList.RDS\")\n# system.time({\n#   n_cores &lt;- detectCores(logical = FALSE)\n#   cl &lt;- makeCluster(n_cores - 1)\n#   sdList &lt;- parLapply(cl, map(impList, assay), mscale)\n#   clusterExport(cl, varlist = \"sdList\", envir = environment())\n#   filList &lt;- parLapply(cl, map(sdList, t), removeCorrelatedTargets)\n#   })\n# stopCluster(cl)\n# saveRDS(filList, \"output/filList.RDS\")\n\nfilList &lt;- readRDS(\"output/filList.RDS\")\ntibble(\"data\" = names(filList), `initial` = unlist(map(map(impList, dim), ~.[1]))) %&gt;%\n  left_join(as_tibble(rownames = \"data\", \n                      unlist(map(map(map(filList, ~.$reduced), dim), ~.[2])))) %&gt;%\n  setNames(c(\"data\", \"initial\", \"filtered\")) %&gt;%\n  pivot_longer(-data, names_to = \"group\", values_to = \"protein amount\") %&gt;%\n  mutate(group = factor(group, levels = c(\"initial\", \"filtered\"))) %&gt;%\n  ggplot(aes(x = data, y = `protein amount`, fill = group)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c('#999999','#E69F00')) +\n  theme_bw(base_line_size = 0, base_rect_size = 0) +\n  geom_text(aes(label = `protein amount`), \n             position = position_dodge(width = 1), vjust = 1.5) +\n  ggtitle(\"Comparison between initial and filtered proteins by correlation\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nJoining with `by = join_by(data)`"
  },
  {
    "objectID": "Untitled.html#section",
    "href": "Untitled.html#section",
    "title": "Untitled",
    "section": "",
    "text": "CLL vs Other\n\nsmpAnno_cll2other &lt;- colData(deList$cll2other) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  mutate(diagSimple = ifelse(diag == \"CLL\", \"CLL\", \"other\")) \nsmpAnno_cll2other %&gt;%\n  group_by(diagSimple) %&gt;%\n  summarise(count = length(diagSimple)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diagSimple, y = count, fill = diagSimple)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2other.mat &lt;- filList$cll2other$reduced\npcRes &lt;- prcomp(cll2other.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diagSimple\")), cbind(pcRes$x, smpAnno_cll2other))$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:20][pvalTab_diag[1:20] &lt; 0.05])\n\n         PC3 \n4.512632e-05 \n\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC3, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC3 (\", plotVar[4, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "Diann_DE.html#cll-vs-mcl",
    "href": "Diann_DE.html#cll-vs-mcl",
    "title": "Diann Differential Expression",
    "section": "CLL vs MCL",
    "text": "CLL vs MCL\n\ncolData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mcl.mat &lt;- filList$cll2mcl$reduced\npcRes &lt;- prcomp(cll2mcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n         PC6          PC4          PC1          PC2          PC5         PC10 \n5.742604e-12 3.427827e-05 3.175356e-02 3.175356e-02 3.756276e-02 4.160454e-01 \n         PC3          PC7          PC8          PC9 \n9.999007e-01 9.999007e-01 9.999007e-01 9.999007e-01 \n\nplotPc %&gt;%\n  ggplot(aes(x = PC4, y = PC6, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC4 (\", plotVar[4, ]$value,\"%)\"), \n       y = paste0(\"PC6 (\", plotVar[6, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(colData(deList$cll2mcl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(849)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 68.899   0.385  69.339 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrDiann &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2mcl\") %&gt;%\n  rbind(errDiann, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6553 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2mcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Diann_DE.html#cll-vs-other",
    "href": "Diann_DE.html#cll-vs-other",
    "title": "Diann Differential Expression",
    "section": "CLL vs Other",
    "text": "CLL vs Other\n\n# waiting time annotation\nwtDF &lt;- readxl::read_excel  (\"data/ProteomisSampleWaitingTime_forJunyan.xlsx\")\n\nsmpAnno_cll2other &lt;- colData(deList$cll2other) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(diagSimple = factor(ifelse(diag == \"CLL\", \"CLL\", \"other\")))\nsmpAnno_cll2other %&gt;%\n  group_by(diagSimple) %&gt;%\n  summarise(count = length(diagSimple)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diagSimple, y = count, fill = diagSimple)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2other.mat &lt;- filList$cll2other$reduced\npcRes &lt;- prcomp(cll2other.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno_cll2other)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diagSimple\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n         PC4          PC1          PC2          PC7          PC6          PC3 \n4.037333e-06 1.488071e-03 1.466624e-02 1.161839e-01 3.577167e-01 9.977573e-01 \n         PC5          PC8          PC9         PC10 \n9.977573e-01 9.977573e-01 9.977573e-01 9.977573e-01 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC4, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC4 (\", plotVar[4, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diagSimple, data = smpAnno_cll2other)\nmatrix_batch &lt;- removeBatchEffect(t(cll2other.mat),\n                                  batch = smpAnno_cll2other$sampleType,\n                                  batch2 = smpAnno_cll2other$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno_cll2other)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC1, y = PC4, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar_batch[1, ]$value,\"%)\"),\n       y = paste0(\"PC4 (\", plotVar_batch[4, ]$value,\"%)\"),\n       title = \"CLL vs other after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2other.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(smpAnno_cll2other$diagSimple == \"CLL\", 1, 0)\n# run lm \nset.seed(29)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2other.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 55.425   0.386  55.874 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrDiann &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2other\") %&gt;%\n  rbind(errDiann, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6537 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- smpAnno_cll2other %&gt;%\n  select(smpID, diagSimple) %&gt;%\n  arrange(diagSimple) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diagSimple = c(\"CLL\" = \"#B4E4A4\", \"other\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Diann_DE.html#cll-vs-smzl",
    "href": "Diann_DE.html#cll-vs-smzl",
    "title": "Diann Differential Expression",
    "section": "CLL vs SMZL",
    "text": "CLL vs SMZL\n\ncolData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2smzl.mat &lt;- filList$cll2smzl$reduced\npcRes &lt;- prcomp(cll2smzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n      PC7       PC1       PC3       PC5       PC2       PC4       PC6       PC8 \n0.1148332 0.3697622 0.7164831 0.8290345 0.9955060 0.9955060 0.9955060 0.9955060 \n      PC9      PC10 \n0.9955060 0.9955060 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs SMZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diag, data = colData(deList$cll2smzl))\nmatrix_batch &lt;- removeBatchEffect(t(cll2smzl.mat),\n                                  batch = colData(deList$cll2smzl)$sampleType,\n                                  batch2 = colData(deList$cll2smzl)$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC1, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar_batch[1, ]$value,\"%)\"),\n       y = paste0(\"PC7 (\", plotVar_batch[7, ]$value,\"%)\"),\n       title = \"CLL vs SMZL after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2smzl.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(colData(deList$cll2smzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(29384)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2smzl.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 14.583   0.192  14.828 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrDiann &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2smzl\") %&gt;%\n  rbind(errDiann, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6536 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"SMZL\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Diann_DE.html#cll-vs-mzl",
    "href": "Diann_DE.html#cll-vs-mzl",
    "title": "Diann Differential Expression",
    "section": "CLL vs MZL",
    "text": "CLL vs MZL\n\ncolData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mzl.mat &lt;- filList$cll2mzl$reduced\npcRes &lt;- prcomp(cll2mzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n       PC7        PC3        PC4        PC2        PC8        PC1       PC10 \n0.01825719 0.08871081 0.09490960 0.66337773 0.66337773 0.74851981 0.94714802 \n       PC5        PC6        PC9 \n0.99729019 0.99729019 0.99729019 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC3, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC3 (\", plotVar[3, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs MZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diag, data = colData(deList$cll2mzl))\nmatrix_batch &lt;- removeBatchEffect(t(cll2mzl.mat),\n                                  batch = colData(deList$cll2mzl)$sampleType,\n                                  batch2 = colData(deList$cll2mzl)$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC3, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC3 (\", plotVar_batch[3, ]$value,\"%)\"),\n       y = paste0(\"PC7 (\", plotVar_batch[7, ]$value,\"%)\"),\n       title = \"CLL vs MZL after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2mzl.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(colData(deList$cll2mzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(228282)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mzl.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 11.772   0.100  11.897 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrDiann &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2mzl\") %&gt;%\n  rbind(errDiann, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 6537 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MZL\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\n\nsave(errDiann, file = \"output/errDiann.RData\")"
  },
  {
    "objectID": "Spec_DE.html",
    "href": "Spec_DE.html",
    "title": "Spectronaut Differential Expression",
    "section": "",
    "text": "load(\"output/seSpec.RData\")\nsmpAnno &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\"))) %&gt;%\n  mutate(diag = factor(diag))\n\n# CLL vs HCL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seSpec[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/Spec_impList.RDS\")"
  },
  {
    "objectID": "Spec_DE.html#impute",
    "href": "Spec_DE.html#impute",
    "title": "Spectronaut Differential Expression",
    "section": "",
    "text": "load(\"output/seSpec.RData\")\nsmpAnno &lt;- colData(seSpec) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  mutate(diagSimple = factor(ifelse(diag %in% c(\"CLL\", \"healthy\", \"MCL\", \"HCL\", \"SMZL\", \"MZL\"), diag, \"other\"))) %&gt;%\n  mutate(diag = factor(diag))\n\n# CLL vs HCL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"HCL\")) & (sampleType != c(\"Spleen biopsy\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- list(\"cll2hcl\" = seSub)\n\n# CLL vs MCL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"MCL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mcl\" = seSub))\n\n# CLL vs SMZL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"SMZL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2smzl\" = seSub))\n\n# CLL vs MZL\nseSub &lt;- seSpec[, filter(smpAnno, (diag %in% c(\"CLL\", \"MZL\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2mzl\" = seSub))\n\n# CLL vs other\nseSub &lt;- seSpec[, filter(smpAnno, (diagSimple %in% c(\"CLL\", \"other\")) & (sampleType != c(\"Pleural effusion\")) & (pelletSize &gt; 0.4) & smpID != \"S454710\")$smpID]\nseSub &lt;- seSub[rowSums(is.na(assay(seSpec)))/ncol(seSpec) &lt; 0.5, ]\nexprMat.vst &lt;- vsn::justvsn(assays(seSub)$count)\nseSub &lt;- SummarizedExperiment(assays = exprMat.vst, \n                              colData = colData(seSub), \n                              rowData = rowData(seSub))\ndeList &lt;- append(deList, list(\"cll2other\" = seSub))\n\n# # run imputation in parallel\n# n_cores &lt;- detectCores(logical = FALSE)\n# # impute_qrilc &lt;- function(x) DEP::impute(x, \"QRILC\")\n# impute_bpca &lt;- function(x) DEP::impute(x, \"bpca\")\n# system.time({\n#   cl &lt;- makeCluster(n_cores - 1)\n#   impList &lt;- parLapply(cl , deList, impute_bpca)\n# })\n# stopCluster(cl)\n# saveRDS(impList, \"output/Spec_impList.RDS\")"
  },
  {
    "objectID": "Spec_DE.html#remove-high-correlated-features",
    "href": "Spec_DE.html#remove-high-correlated-features",
    "title": "Spectronaut Differential Expression",
    "section": "Remove high-correlated features",
    "text": "Remove high-correlated features\nstandardization and correlation\n\nimpList &lt;- readRDS(\"output/Spec_impList.RDS\")\n# system.time({\n#   n_cores &lt;- detectCores(logical = FALSE)\n#   cl &lt;- makeCluster(n_cores - 1)\n#   sdList &lt;- parLapply(cl, map(impList, assay), mscale)\n#   clusterExport(cl, varlist = \"sdList\", envir = environment())\n#   filList &lt;- parLapply(cl, map(sdList, t), removeCorrelatedTargets)\n#   })\n# stopCluster(cl)\n# saveRDS(filList, \"output/Spec_filList.RDS\")\n\nfilList &lt;- readRDS(\"output/Spec_filList.RDS\")\ntibble(\"data\" = names(filList), `initial` = unlist(map(map(impList, dim), ~.[1]))) %&gt;%\n  left_join(as_tibble(rownames = \"data\", \n                      unlist(map(map(map(filList, ~.$reduced), dim), ~.[2])))) %&gt;%\n  setNames(c(\"data\", \"initial\", \"filtered\")) %&gt;%\n  pivot_longer(-data, names_to = \"group\", values_to = \"protein amount\") %&gt;%\n  mutate(group = factor(group, levels = c(\"initial\", \"filtered\"))) %&gt;%\n  ggplot(aes(x = data, y = `protein amount`, fill = group)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c('#999999','#E69F00')) +\n  theme_bw(base_line_size = 0, base_rect_size = 0) +\n  geom_text(aes(label = `protein amount`), \n             position = position_dodge(width = 1), vjust = 1.5) +\n  ggtitle(\"Comparison between initial and filtered proteins by correlation\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nJoining with `by = join_by(data)`"
  },
  {
    "objectID": "Spec_DE.html#cll-vs-hcl",
    "href": "Spec_DE.html#cll-vs-hcl",
    "title": "Spectronaut Differential Expression",
    "section": "CLL vs HCL",
    "text": "CLL vs HCL\ndata and pc plot\n\ncolData(deList$cll2hcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2hcl.mat &lt;- filList$cll2hcl$reduced\npcRes &lt;- prcomp(cll2hcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs HCL\") +\n  theme_bw() +\n  geom_text(data = plotPc[plotPc$diag == \"HCL\" & plotPc$PC1 &gt; 0, ], \n            aes(label = smpID), col = \"black\", nudge_x = 5, nudge_y = 5, size = 5) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\noutId &lt;- which(rownames(cll2hcl.mat) %in% \"S454563\")\ncll2hcl.mat &lt;- cll2hcl.mat[-outId, ]\ny &lt;- ifelse(colData(deList$cll2hcl)[-outId, ]$diag == \"CLL\", 1, 0)\n\n\nGeneralized Linear Model\nremove “S454563” that perhaps is a wrong annotation sample\n\n# run lm \nset.seed(1374)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2hcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 24.947   0.281  25.269 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrSpec &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2hcl\")\n\n\n\nVisualization\n\nNR &lt;- 30 # around 30 features selected \n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 5917 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2hcl[, -outId]) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"HCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2hcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Spec_DE.html#cll-vs-mcl",
    "href": "Spec_DE.html#cll-vs-mcl",
    "title": "Spectronaut Differential Expression",
    "section": "CLL vs MCL",
    "text": "CLL vs MCL\n\ncolData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mcl.mat &lt;- filList$cll2mcl$reduced\npcRes &lt;- prcomp(cll2mcl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\n\nJoining with `by = join_by(smpID)`\n\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC2, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC2 (\", plotVar[2, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n         PC7          PC6          PC1          PC8          PC9          PC2 \n1.334468e-13 3.281656e-04 4.534002e-02 1.394258e-01 2.913691e-01 9.995009e-01 \n         PC3          PC4          PC5         PC10 \n9.995009e-01 9.995009e-01 9.995009e-01 9.995009e-01 \n\nplotPc %&gt;%\n  ggplot(aes(x = PC6, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC6 (\", plotVar[6, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs MCL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ny &lt;- ifelse(colData(deList$cll2mcl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(849)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mcl.mat[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 61.363   0.326  61.740 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrSpec &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2mcl\") %&gt;%\n  rbind(errSpec, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 5954 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mcl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MCL\" = \"#2C537C\"))\npheatmap::pheatmap(t(cll2mcl.mat[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID]), \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Spec_DE.html#cll-vs-other",
    "href": "Spec_DE.html#cll-vs-other",
    "title": "Spectronaut Differential Expression",
    "section": "CLL vs Other",
    "text": "CLL vs Other\n\n# waiting time annotation\nwtDF &lt;- readxl::read_excel  (\"data/ProteomisSampleWaitingTime_forJunyan.xlsx\")\n\nsmpAnno_cll2other &lt;- colData(deList$cll2other) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(wtDF, by = c(\"sampleID\" = \"SampleID\")) %&gt;%\n  mutate(diagSimple = factor(ifelse(diag == \"CLL\", \"CLL\", \"other\")))\nsmpAnno_cll2other %&gt;%\n  group_by(diagSimple) %&gt;%\n  summarise(count = length(diagSimple)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diagSimple, y = count, fill = diagSimple)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2other.mat &lt;- filList$cll2other$reduced\npcRes &lt;- prcomp(cll2other.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno_cll2other)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diagSimple\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n         PC5          PC7          PC1          PC8          PC6          PC2 \n0.0003161223 0.0003869073 0.0008048270 0.0162126317 0.0197598175 0.0561753775 \n         PC3          PC4          PC9         PC10 \n0.2186064061 0.9929100620 0.9929100620 0.9929100620 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC4, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC4 (\", plotVar[4, ]$value,\"%)\"), \n       title = \"CLL vs other\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diagSimple, data = smpAnno_cll2other)\nmatrix_batch &lt;- removeBatchEffect(t(cll2other.mat),\n                                  batch = smpAnno_cll2other$sampleType,\n                                  batch2 = smpAnno_cll2other$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno_cll2other)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC5, y = PC7, col = diagSimple)) +\n  geom_point() +\n  labs(x = paste0(\"PC5 (\", plotVar_batch[5, ]$value,\"%)\"),\n       y = paste0(\"PC7 (\", plotVar_batch[7, ]$value,\"%)\"),\n       title = \"CLL vs other after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2other.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(smpAnno_cll2other$diagSimple == \"CLL\", 1, 0)\n# run lm \nset.seed(29)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2other.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 50.732   0.369  51.179 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrSpec &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2other\") %&gt;%\n  rbind(errSpec, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 5932 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- smpAnno_cll2other %&gt;%\n  select(smpID, diagSimple) %&gt;%\n  arrange(diagSimple) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diagSimple = c(\"CLL\" = \"#B4E4A4\", \"other\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Spec_DE.html#cll-vs-smzl",
    "href": "Spec_DE.html#cll-vs-smzl",
    "title": "Spectronaut Differential Expression",
    "section": "CLL vs SMZL",
    "text": "CLL vs SMZL\n\ncolData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2smzl.mat &lt;- filList$cll2smzl$reduced\npcRes &lt;- prcomp(cll2smzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n       PC8        PC1        PC2        PC3        PC4        PC5        PC6 \n0.01496144 0.93457299 0.99906753 0.99906753 0.99906753 0.99906753 0.99906753 \n       PC7        PC9       PC10 \n0.99906753 0.99906753 0.99906753 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC1, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar[1, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs SMZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diag, data = colData(deList$cll2smzl))\nmatrix_batch &lt;- removeBatchEffect(t(cll2smzl.mat),\n                                  batch = colData(deList$cll2smzl)$sampleType,\n                                  batch2 = colData(deList$cll2smzl)$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC1, y = PC8, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", plotVar_batch[1, ]$value,\"%)\"),\n       y = paste0(\"PC8 (\", plotVar_batch[8, ]$value,\"%)\"),\n       title = \"CLL vs SMZL after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2smzl.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(colData(deList$cll2smzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(29384)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2smzl.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 13.647   0.056  13.709 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrSpec &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2smzl\") %&gt;%\n  rbind(errSpec, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 5939 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2smzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"SMZL\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")"
  },
  {
    "objectID": "Spec_DE.html#cll-vs-mzl",
    "href": "Spec_DE.html#cll-vs-mzl",
    "title": "Spectronaut Differential Expression",
    "section": "CLL vs MZL",
    "text": "CLL vs MZL\n\ncolData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  group_by(diag) %&gt;%\n  summarise(count = length(diag)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = diag, y = count, fill = diag)) +\n  geom_bar(stat = \"identity\") +\n  geom_label(aes(label = count), alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  theme_bw()\n\n\n\ncll2mzl.mat &lt;- filList$cll2mzl$reduced\npcRes &lt;- prcomp(cll2mzl.mat, center = TRUE, scale. = TRUE)\nplotPc &lt;- pcRes$x %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;% \n  left_join(smpAnno)\nplotVar &lt;- as_tibble(round(summary(pcRes)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\n\npvalTab_diag &lt;-  sapply(colnames(pcRes$x), function(pc){\n  t.test(as.formula(paste0(pc, \"~\", \"diag\")), plotPc)$p.value\n    }) %&gt;% p.adjust(\"BH\")\nsort(pvalTab_diag[1:10])\n\n       PC6        PC8        PC7        PC9        PC1        PC4        PC2 \n0.02347877 0.02347877 0.02675701 0.12248596 0.41623127 0.52317678 0.53243442 \n       PC3        PC5       PC10 \n0.99907441 0.99907441 0.99907441 \n\n# PC plot\nplotPc %&gt;%\n  ggplot(aes(x = PC3, y = PC7, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC3 (\", plotVar[3, ]$value,\"%)\"), \n       y = paste0(\"PC7 (\", plotVar[7, ]$value,\"%)\"), \n       title = \"CLL vs MZL\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# after batch removal\ndesign0 &lt;- model.matrix(~diag, data = colData(deList$cll2mzl))\nmatrix_batch &lt;- removeBatchEffect(t(cll2mzl.mat),\n                                  batch = colData(deList$cll2mzl)$sampleType,\n                                  batch2 = colData(deList$cll2mzl)$WaitingTime_day,\n                                  design = design0)\n\npcRes_batch &lt;- prcomp(t(matrix_batch), center = TRUE, scale. = TRUE)\nplotPc_batch &lt;- pcRes_batch$x %&gt;%\n  as_tibble(rownames = \"smpID\") %&gt;%\n  left_join(smpAnno)\nplotVar_batch &lt;- as_tibble(round(summary(pcRes_batch)$importance[\"Proportion of Variance\", ] * 100, 2), rownames = \"PC\")\nplotPc_batch %&gt;%\n  ggplot(aes(x = PC7, y = PC8, col = diag)) +\n  geom_point() +\n  labs(x = paste0(\"PC7 (\", plotVar_batch[7, ]$value,\"%)\"),\n       y = paste0(\"PC8 (\", plotVar_batch[8, ]$value,\"%)\"),\n       title = \"CLL vs MZL after batch\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\nGeneralized Linear Model\n\ncll2mzl.mat_batch &lt;- t(matrix_batch)\ny &lt;- ifelse(colData(deList$cll2mzl)$diag == \"CLL\", 1, 0)\n# run lm \nset.seed(228282)\nrepetition &lt;- 100\nsystem.time({resMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 1))[1:sum(y)], sum(!y), replace = TRUE), order(match(y, 1))[(sum(y)+1):length(y)])\n    X &lt;- cll2mzl.mat_batch[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = sum(!y),\n                          type.measure = \"class\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\n})\n\n   user  system elapsed \n 10.677   0.081  10.762 \n\ncolnames(resMat) &lt;- seq_len(repetition)\n\nerrSpec &lt;- as_tibble(resMat[\"errors\", ], rownames = \"repetition\") %&gt;%\n  mutate(data = \"cll2mzl\") %&gt;%\n  rbind(errSpec, .)\n\n\n\nVisualization\n\n# error plot\nas_tibble(rownames = \"repetition\", resMat[\"errors\", ]) %&gt;%\n  mutate(repetition = factor(repetition, level = as.numeric(repetition))) %&gt;%\n  ggplot(aes(x = repetition, y = value, group = 1)) +\n  geom_point(size = 1) +\n  geom_line() +\n  labs(title = \"The smallest errors inside CV along the repetition\") +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.x = element_blank()) +\n  stat_smooth(method = \"lm\", formula = y~1, se = FALSE)\n\n\n\n# coefficient is zero or not\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\nzeroProts &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value == 0) %&gt;%\n  pull(protID)\nzeroMat &lt;- ifelse(coefMat[-which(rownames(coefMat) %in% zeroProts), ] == 0, 0, 1)\npheatmap::pheatmap(zeroMat, \n                   treeheight_row = 0, treeheight_col = 0,\n                   show_rownames = FALSE, show_colnames = FALSE,\n                   color = c(\"lightgrey\", \"black\"),\n                   border_color = \"lightgrey\", \n                   legend_breaks = c(0, 1),\n                   legend_labels = c(\"zero\", \"non-zero\"),\n                   legend = TRUE,\n                   main = paste0(\"coefficients existance of \", nrow(zeroMat), \" none-zero proteins among \", repetition, \" repetition\"))\n\n\n\n# frequency plot\nfreqDF &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(frequency = factor(value/repetition * 100))\nfreqDF %&gt;%\n  ggplot(aes(x = frequency, y = count, fill = frequency)) +\n  geom_bar(stat = \"identity\") +\n  theme_bw(base_line_size = 0) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 90, size = 7, vjust = 0.5)) +\n  labs(x = \"proportion of non-zero coefficients (%)\", y = \"protein count\", title = paste0(\"The  frequency of coefficients in \", repetition, \" repetition\")) +\n  geom_text(aes(label = count), vjust = 0, size = 2.5)\n\n\n\ncutoff &lt;- freqDF %&gt;% arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, protID))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 5941 rows containing missing values (`geom_label()`).\n\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  ggplot(aes(x = protID, y = mean, fill = protID)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\")\n\n\n\n# boxplot\ncoefMat[filter(sumDF, frequency &gt;= cutoff)$protID, ] %&gt;%\n  as_tibble(rownames = \"protID\") %&gt;%\n  mutate(protID = factor(protID, levels = protID)) %&gt;%\n  pivot_longer(-protID, names_to = \"epoch\", values_to = \"coefficient\") %&gt;%\n  ggplot(aes(x = protID, y = coefficient, fill = protID)) +\n  geom_boxplot(outlier.size = 0.1) +\n  # geom_jitter(size = 0.05) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"none\")\n\n\n\n# heatmap\ncolAnno &lt;- colData(deList$cll2mzl) %&gt;% \n  as_tibble(rownames = \"smpID\") %&gt;%\n  select(smpID, diag) %&gt;%\n  arrange(diag) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(diag = c(\"CLL\" = \"#B4E4A4\", \"MZL\" = \"#2C537C\"))\npheatmap::pheatmap(matrix_batch[sumDF[!is.na(sumDF$delabel), ]$protID, rownames(colAnno)], \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n\n\n\n\n\nsave(errSpec, file = \"output/errSpec.RData\")"
  },
  {
    "objectID": "Trisomy12 and IGHV.html",
    "href": "Trisomy12 and IGHV.html",
    "title": "Trisomy12 and IGHV",
    "section": "",
    "text": "load(\"data/proteomic_explore_enc.RData\")\n# load(\"data/patMeta_enc.RData\")\nload(\"output/seDiann.RData\")\npatDF &lt;- colData(protCLL) %&gt;% as_tibble(rownames = \"smpID\")\ngeneDF &lt;- as_tibble(rowData(protCLL), rownames = \"protID\")\nassays(protCLL)$log2Norm %&gt;% as_tibble(rownames = \"protID\") %&gt;%\n  pivot_longer(-protID, names_to = \"smpID\", values_to = \"count\") %&gt;%\n  left_join(patDF) %&gt;%\n  arrange(gender) %&gt;%\n  mutate(smpID = factor(smpID, levels = unique(smpID))) %&gt;%\n  ggplot(aes(x = smpID, y = count, fill = gender)) +\n  geom_boxplot(outlier.size = 0.2) +\n  theme(axis.text.x = element_blank()) +\n  scale_fill_manual(values = c(\"m\" = \"lightblue\", \"f\" = \"#2C537C\"))\n\nJoining with `by = join_by(smpID)`\n\n\nWarning: Removed 7605 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "Trisomy12 and IGHV.html#data-plot",
    "href": "Trisomy12 and IGHV.html#data-plot",
    "title": "Trisomy12 and IGHV",
    "section": "Data Plot",
    "text": "Data Plot\n\npatDF %&gt;% group_by(IGHV.status, trisomy12) %&gt;%\n  summarise(count = length(smpID)) %&gt;%\n  ggplot(aes(x = IGHV.status, y = count, fill = trisomy12)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c('#999999','pink')) +\n  geom_text(aes(label = count), \n            position = position_stack(vjust = .5)) +\n  theme(panel.background = element_rect(fill = \"white\",\n                                        colour = \"black\"))\n\n`summarise()` has grouped output by 'IGHV.status'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "Trisomy12 and IGHV.html#missing-plot",
    "href": "Trisomy12 and IGHV.html#missing-plot",
    "title": "Trisomy12 and IGHV",
    "section": "Missing Plot",
    "text": "Missing Plot\n\nifelse(is.na(assay(protCLL)) == TRUE, 1, 0) %&gt;%\n  pheatmap( show_rownames = FALSE, show_colnames = FALSE, treeheight_row = 0, treeheight_col = 0)\n\n\n\ncheck_miss_ratio(assay(protCLL))\n\n[1] 0.02521769\n\nmax(rowSums(is.na(assay(protCLL)))/ncol(protCLL))\n\n[1] 0.4065934"
  },
  {
    "objectID": "Trisomy12 and IGHV.html#impute-correct-batch-effect-filter-high-correlated-proteins",
    "href": "Trisomy12 and IGHV.html#impute-correct-batch-effect-filter-high-correlated-proteins",
    "title": "Trisomy12 and IGHV",
    "section": "Impute, correct batch effect, filter high-correlated proteins",
    "text": "Impute, correct batch effect, filter high-correlated proteins\n\n# bpca_model &lt;- bpca_method(t(assays(protCLL)$log2Norm))\n# assay.imp &lt;- bpca_recon(t(assays(protCLL)$log2Norm), bpca_model)\n# pcRes &lt;- prcomp(assay.imp, center = TRUE, scale. = TRUE)\n# pcRes$x %&gt;% as_tibble(rownames = \"smpID\") %&gt;% \n#   left_join(patDF) %&gt;%\n#   ggplot(aes(x = PC1, y = PC2, col = trisomy12, shape = IGHV.status, size = batch)) +\n#   geom_point()\n# assay.combat &lt;- sva::ComBat(t(assay.imp), batch = patDF$batch)\n# assay.fil &lt;- removeCorrelatedTargets(t(assay.combat))$reduced\n\n# saveRDS(assay.fil, \"output/mutation_filData.RDS\")\nassay.fil &lt;- readRDS(\"output/mutation_filData.RDS\")\ndim(assay.fil)\n\n[1]   91 3225"
  },
  {
    "objectID": "Trisomy12 and IGHV.html#trisomy12",
    "href": "Trisomy12 and IGHV.html#trisomy12",
    "title": "Trisomy12 and IGHV",
    "section": "Trisomy12",
    "text": "Trisomy12\n\nNR &lt;- 30\nrepetition &lt;- 100\ny &lt;- patDF$trisomy12\nresMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, 0))[1:sum(y == 0)], sum(y == 1), replace = TRUE), order(match(y, 0))[(sum(y == 0)+1):length(y)])\n    X &lt;- assay.fil[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = 3,\n                          type.measure = \"auc\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\ncolnames(resMat) &lt;- seq_len(repetition)\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\n\ncutoff &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  left_join(geneDF) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, hgnc_symbol))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 3196 rows containing missing values (`geom_label()`).\n\n\n\n\n# heatmap\ncolAnno &lt;- patDF %&gt;% \n  select(smpID, trisomy12) %&gt;%\n  arrange(trisomy12) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(trisomy12 = c(\"0\" = \"grey\", \"1\" = \"black\"))\nheatData &lt;- t(assay.fil[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID])\nrownames(heatData) &lt;- sumDF[!is.na(sumDF$delabel), ]$hgnc_symbol\npheatmap::pheatmap(heatData, \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(hgnc_symbol = factor(hgnc_symbol, levels = hgnc_symbol)) %&gt;%\n  ggplot(aes(x = hgnc_symbol, y = mean, fill = hgnc_symbol)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\") +\n  coord_flip() +\n  scale_fill_viridis_d()"
  },
  {
    "objectID": "Trisomy12 and IGHV.html#ighv",
    "href": "Trisomy12 and IGHV.html#ighv",
    "title": "Trisomy12 and IGHV",
    "section": "IGHV",
    "text": "IGHV\n\nNR &lt;- 30\nrepetition &lt;- 100\ny &lt;- patDF$IGHV.status\nresMat &lt;- lapply(seq_len(repetition), function(n){\n    smpIdx &lt;- c(sample(order(match(y, \"M\"))[1:sum(y == \"M\")], sum(y == \"U\"), replace = TRUE), order(match(y, \"M\"))[(sum(y == \"M\")+1):length(y)])\n    X &lt;- assay.fil[smpIdx, ]\n    cv.lasso &lt;- cv.glmnet(x = X,\n                          y = y[smpIdx], \n                          family = \"binomial\",\n                          alpha = 1,\n                          nfolds = 3,\n                          type.measure = \"auc\")\n    coef(cv.lasso, s = cv.lasso$lambda.min) %&gt;% \n      as.matrix() %&gt;%\n      rbind(\"errors\" = cv.lasso$cvm[cv.lasso$index[\"min\", ]])\n  }) %&gt;% do.call(cbind, .)\ncolnames(resMat) &lt;- seq_len(repetition)\ncoefMat &lt;- resMat[-c(1, nrow(resMat)), ]\n\ncutoff &lt;- rowSums(coefMat != 0) %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;% \n  filter(value != 0) %&gt;%\n  group_by(value) %&gt;%\n  summarise(count = length(value)) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(value)) %&gt;% \n  mutate(cum = cumsum(count), dif = cum - NR ) %&gt;%\n  filter(abs(dif) == min(abs(dif))) %&gt;%\n  pull(value)\n# frequency vs mean plot\nsumDF &lt;- apply(coefMat, 1, function(v) c(mean = mean(v[v != 0]), sd = sd(v[v != 0]))) %&gt;% \n  ifelse(is.nan(.) | is.na(.), 0, .) %&gt;%\n  t() %&gt;% \n  as_tibble(rownames = \"protID\") %&gt;%\n  left_join(as_tibble(rownames = \"protID\", rowSums(coefMat != 0) / repetition * 100))  %&gt;%\n  setNames(c(\"protID\", \"mean\", \"sd\", \"frequency\")) %&gt;%\n  left_join(geneDF) %&gt;%\n  mutate(coefficient = case_when(mean &gt; 0 & frequency &gt;= cutoff ~ \"positive\", \n                                 mean == 0 | frequency &lt; cutoff ~ \"not selected\",\n                                 mean &lt; 0 & frequency &gt;= cutoff ~ \"negative\"),\n         delabel = ifelse(coefficient == \"not selected\", NA, hgnc_symbol))  %&gt;%\n  arrange(mean)\n\nJoining with `by = join_by(protID)`\nJoining with `by = join_by(protID)`\n\nsumDF %&gt;% ggplot(aes(x = mean, y = frequency, col = coefficient)) +\n  geom_point() +\n  scale_color_manual(values = c(\"dodgerblue3\", \"gray50\", \"firebrick3\")) +\n  geom_hline(yintercept = cutoff, lty = 4, col = \"black\", lwd = 0.8) +\n  geom_vline(xintercept = 0, lty = 4, col = \"black\", lwd = 0.8) +\n  labs(y = \"Frequency (%)\") +\n  geom_label(aes(label = delabel), size = 3) +\n  theme_bw()\n\nWarning: Removed 3194 rows containing missing values (`geom_label()`).\n\n\n\n\n# heatmap\ncolAnno &lt;- patDF %&gt;% \n  select(smpID, IGHV.status) %&gt;%\n  arrange(IGHV.status) %&gt;%\n  column_to_rownames(\"smpID\")\nmat_colors &lt;- list(IGHV.status = c(\"M\" = \"#15A371\", \"U\" = \"#F2D39B\"))\nheatData &lt;- t(assay.fil[rownames(colAnno), sumDF[!is.na(sumDF$delabel), ]$protID])\nrownames(heatData) &lt;- sumDF[!is.na(sumDF$delabel), ]$hgnc_symbol\npheatmap::pheatmap(heatData, \n                   treeheight_row = 0, treeheight_col = 0,\n                   cluster_rows = FALSE, cluster_cols = FALSE,\n                   show_colnames = FALSE,\n                   annotation_col = colAnno, \n                   annotation_colors = mat_colors,\n                   scale = \"row\")\n\n\n\n# barplot \nsumDF %&gt;%\n  filter(frequency &gt;= cutoff) %&gt;%\n  mutate(hgnc_symbol = factor(hgnc_symbol, levels = hgnc_symbol)) %&gt;%\n  ggplot(aes(x = hgnc_symbol, y = mean, fill = hgnc_symbol)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 90), legend.position = \"none\") +\n  coord_flip() +\n  scale_fill_viridis_d()"
  },
  {
    "objectID": "errors.html",
    "href": "errors.html",
    "title": "Errors",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nload(\"output/errDiann.RData\")\nload(\"output/errSpec.RData\")\n\nerrDiann %&gt;% mutate(software = \"Diann\") %&gt;%\n  rbind(mutate(errSpec, software = \"Spectronaut\")) %&gt;%\n  group_by(software, data) %&gt;%\n  summarise(mean = mean(value), sd = sd(value)) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = data, y = mean, fill = data)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),  width = 0.4) +\n  geom_label(aes(label = round(mean, 3)), alpha = 0.2, size = 3) +\n  theme_bw() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  facet_grid(\"software\")\n\n`summarise()` has grouped output by 'software'. You can override using the\n`.groups` argument."
  }
]